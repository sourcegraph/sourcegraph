// Code generated by go-mockgen 1.3.7; DO NOT EDIT.
//
// This file was generated by running `sg generate` (or `go-mockgen`) at the root of
// this repository. To add additional mocks to this or another package, add a new entry
// to the mockgen.yaml file in the root of this repository.

package subscriptionsservice

import (
	"context"
	"sync"

	sourcegraphaccountssdkgo "github.com/sourcegraph/sourcegraph-accounts-sdk-go"
	v1 "github.com/sourcegraph/sourcegraph-accounts-sdk-go/clients/v1"
	subscriptions "github.com/sourcegraph/sourcegraph/cmd/enterprise-portal/internal/database/subscriptions"
	utctime "github.com/sourcegraph/sourcegraph/cmd/enterprise-portal/internal/database/utctime"
	license "github.com/sourcegraph/sourcegraph/internal/license"
	iam "github.com/sourcegraph/sourcegraph/lib/managedservicesplatform/iam"
)

// MockStoreV1 is a mock implementation of the StoreV1 interface (from the
// package
// github.com/sourcegraph/sourcegraph/cmd/enterprise-portal/internal/subscriptionsservice)
// used for unit testing.
type MockStoreV1 struct {
	// CreateEnterpriseSubscriptionLicenseKeyFunc is an instance of a mock
	// function object controlling the behavior of the method
	// CreateEnterpriseSubscriptionLicenseKey.
	CreateEnterpriseSubscriptionLicenseKeyFunc *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc
	// GenerateSubscriptionIDFunc is an instance of a mock function object
	// controlling the behavior of the method GenerateSubscriptionID.
	GenerateSubscriptionIDFunc *StoreV1GenerateSubscriptionIDFunc
	// GetEnterpriseSubscriptionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// GetEnterpriseSubscription.
	GetEnterpriseSubscriptionFunc *StoreV1GetEnterpriseSubscriptionFunc
	// GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc is an instance of
	// a mock function object controlling the behavior of the method
	// GetRequiredEnterpriseSubscriptionLicenseKeyTags.
	GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc
	// GetSAMSUserByIDFunc is an instance of a mock function object
	// controlling the behavior of the method GetSAMSUserByID.
	GetSAMSUserByIDFunc *StoreV1GetSAMSUserByIDFunc
	// IAMCheckFunc is an instance of a mock function object controlling the
	// behavior of the method IAMCheck.
	IAMCheckFunc *StoreV1IAMCheckFunc
	// IAMListObjectsFunc is an instance of a mock function object
	// controlling the behavior of the method IAMListObjects.
	IAMListObjectsFunc *StoreV1IAMListObjectsFunc
	// IAMWriteFunc is an instance of a mock function object controlling the
	// behavior of the method IAMWrite.
	IAMWriteFunc *StoreV1IAMWriteFunc
	// IntrospectSAMSTokenFunc is an instance of a mock function object
	// controlling the behavior of the method IntrospectSAMSToken.
	IntrospectSAMSTokenFunc *StoreV1IntrospectSAMSTokenFunc
	// ListEnterpriseSubscriptionLicensesFunc is an instance of a mock
	// function object controlling the behavior of the method
	// ListEnterpriseSubscriptionLicenses.
	ListEnterpriseSubscriptionLicensesFunc *StoreV1ListEnterpriseSubscriptionLicensesFunc
	// ListEnterpriseSubscriptionsFunc is an instance of a mock function
	// object controlling the behavior of the method
	// ListEnterpriseSubscriptions.
	ListEnterpriseSubscriptionsFunc *StoreV1ListEnterpriseSubscriptionsFunc
	// NowFunc is an instance of a mock function object controlling the
	// behavior of the method Now.
	NowFunc *StoreV1NowFunc
	// RevokeEnterpriseSubscriptionLicenseFunc is an instance of a mock
	// function object controlling the behavior of the method
	// RevokeEnterpriseSubscriptionLicense.
	RevokeEnterpriseSubscriptionLicenseFunc *StoreV1RevokeEnterpriseSubscriptionLicenseFunc
	// SignEnterpriseSubscriptionLicenseKeyFunc is an instance of a mock
	// function object controlling the behavior of the method
	// SignEnterpriseSubscriptionLicenseKey.
	SignEnterpriseSubscriptionLicenseKeyFunc *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc
	// UpsertEnterpriseSubscriptionFunc is an instance of a mock function
	// object controlling the behavior of the method
	// UpsertEnterpriseSubscription.
	UpsertEnterpriseSubscriptionFunc *StoreV1UpsertEnterpriseSubscriptionFunc
}

// NewMockStoreV1 creates a new mock of the StoreV1 interface. All methods
// return zero values for all results, unless overwritten.
func NewMockStoreV1() *MockStoreV1 {
	return &MockStoreV1{
		CreateEnterpriseSubscriptionLicenseKeyFunc: &StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc{
			defaultHook: func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (r0 *subscriptions.LicenseWithConditions, r1 error) {
				return
			},
		},
		GenerateSubscriptionIDFunc: &StoreV1GenerateSubscriptionIDFunc{
			defaultHook: func() (r0 string, r1 error) {
				return
			},
		},
		GetEnterpriseSubscriptionFunc: &StoreV1GetEnterpriseSubscriptionFunc{
			defaultHook: func(context.Context, string) (r0 *subscriptions.SubscriptionWithConditions, r1 error) {
				return
			},
		},
		GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc: &StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc{
			defaultHook: func() (r0 []string) {
				return
			},
		},
		GetSAMSUserByIDFunc: &StoreV1GetSAMSUserByIDFunc{
			defaultHook: func(context.Context, string) (r0 *v1.User, r1 error) {
				return
			},
		},
		IAMCheckFunc: &StoreV1IAMCheckFunc{
			defaultHook: func(context.Context, iam.CheckOptions) (r0 bool, r1 error) {
				return
			},
		},
		IAMListObjectsFunc: &StoreV1IAMListObjectsFunc{
			defaultHook: func(context.Context, iam.ListObjectsOptions) (r0 []string, r1 error) {
				return
			},
		},
		IAMWriteFunc: &StoreV1IAMWriteFunc{
			defaultHook: func(context.Context, iam.WriteOptions) (r0 error) {
				return
			},
		},
		IntrospectSAMSTokenFunc: &StoreV1IntrospectSAMSTokenFunc{
			defaultHook: func(context.Context, string) (r0 *sourcegraphaccountssdkgo.IntrospectTokenResponse, r1 error) {
				return
			},
		},
		ListEnterpriseSubscriptionLicensesFunc: &StoreV1ListEnterpriseSubscriptionLicensesFunc{
			defaultHook: func(context.Context, subscriptions.ListLicensesOpts) (r0 []*subscriptions.LicenseWithConditions, r1 error) {
				return
			},
		},
		ListEnterpriseSubscriptionsFunc: &StoreV1ListEnterpriseSubscriptionsFunc{
			defaultHook: func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) (r0 []*subscriptions.SubscriptionWithConditions, r1 error) {
				return
			},
		},
		NowFunc: &StoreV1NowFunc{
			defaultHook: func() (r0 utctime.Time) {
				return
			},
		},
		RevokeEnterpriseSubscriptionLicenseFunc: &StoreV1RevokeEnterpriseSubscriptionLicenseFunc{
			defaultHook: func(context.Context, string, subscriptions.RevokeLicenseOpts) (r0 *subscriptions.LicenseWithConditions, r1 error) {
				return
			},
		},
		SignEnterpriseSubscriptionLicenseKeyFunc: &StoreV1SignEnterpriseSubscriptionLicenseKeyFunc{
			defaultHook: func(license.Info) (r0 string, r1 error) {
				return
			},
		},
		UpsertEnterpriseSubscriptionFunc: &StoreV1UpsertEnterpriseSubscriptionFunc{
			defaultHook: func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (r0 *subscriptions.SubscriptionWithConditions, r1 error) {
				return
			},
		},
	}
}

// NewStrictMockStoreV1 creates a new mock of the StoreV1 interface. All
// methods panic on invocation, unless overwritten.
func NewStrictMockStoreV1() *MockStoreV1 {
	return &MockStoreV1{
		CreateEnterpriseSubscriptionLicenseKeyFunc: &StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc{
			defaultHook: func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
				panic("unexpected invocation of MockStoreV1.CreateEnterpriseSubscriptionLicenseKey")
			},
		},
		GenerateSubscriptionIDFunc: &StoreV1GenerateSubscriptionIDFunc{
			defaultHook: func() (string, error) {
				panic("unexpected invocation of MockStoreV1.GenerateSubscriptionID")
			},
		},
		GetEnterpriseSubscriptionFunc: &StoreV1GetEnterpriseSubscriptionFunc{
			defaultHook: func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error) {
				panic("unexpected invocation of MockStoreV1.GetEnterpriseSubscription")
			},
		},
		GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc: &StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc{
			defaultHook: func() []string {
				panic("unexpected invocation of MockStoreV1.GetRequiredEnterpriseSubscriptionLicenseKeyTags")
			},
		},
		GetSAMSUserByIDFunc: &StoreV1GetSAMSUserByIDFunc{
			defaultHook: func(context.Context, string) (*v1.User, error) {
				panic("unexpected invocation of MockStoreV1.GetSAMSUserByID")
			},
		},
		IAMCheckFunc: &StoreV1IAMCheckFunc{
			defaultHook: func(context.Context, iam.CheckOptions) (bool, error) {
				panic("unexpected invocation of MockStoreV1.IAMCheck")
			},
		},
		IAMListObjectsFunc: &StoreV1IAMListObjectsFunc{
			defaultHook: func(context.Context, iam.ListObjectsOptions) ([]string, error) {
				panic("unexpected invocation of MockStoreV1.IAMListObjects")
			},
		},
		IAMWriteFunc: &StoreV1IAMWriteFunc{
			defaultHook: func(context.Context, iam.WriteOptions) error {
				panic("unexpected invocation of MockStoreV1.IAMWrite")
			},
		},
		IntrospectSAMSTokenFunc: &StoreV1IntrospectSAMSTokenFunc{
			defaultHook: func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
				panic("unexpected invocation of MockStoreV1.IntrospectSAMSToken")
			},
		},
		ListEnterpriseSubscriptionLicensesFunc: &StoreV1ListEnterpriseSubscriptionLicensesFunc{
			defaultHook: func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error) {
				panic("unexpected invocation of MockStoreV1.ListEnterpriseSubscriptionLicenses")
			},
		},
		ListEnterpriseSubscriptionsFunc: &StoreV1ListEnterpriseSubscriptionsFunc{
			defaultHook: func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error) {
				panic("unexpected invocation of MockStoreV1.ListEnterpriseSubscriptions")
			},
		},
		NowFunc: &StoreV1NowFunc{
			defaultHook: func() utctime.Time {
				panic("unexpected invocation of MockStoreV1.Now")
			},
		},
		RevokeEnterpriseSubscriptionLicenseFunc: &StoreV1RevokeEnterpriseSubscriptionLicenseFunc{
			defaultHook: func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
				panic("unexpected invocation of MockStoreV1.RevokeEnterpriseSubscriptionLicense")
			},
		},
		SignEnterpriseSubscriptionLicenseKeyFunc: &StoreV1SignEnterpriseSubscriptionLicenseKeyFunc{
			defaultHook: func(license.Info) (string, error) {
				panic("unexpected invocation of MockStoreV1.SignEnterpriseSubscriptionLicenseKey")
			},
		},
		UpsertEnterpriseSubscriptionFunc: &StoreV1UpsertEnterpriseSubscriptionFunc{
			defaultHook: func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error) {
				panic("unexpected invocation of MockStoreV1.UpsertEnterpriseSubscription")
			},
		},
	}
}

// NewMockStoreV1From creates a new mock of the MockStoreV1 interface. All
// methods delegate to the given implementation, unless overwritten.
func NewMockStoreV1From(i StoreV1) *MockStoreV1 {
	return &MockStoreV1{
		CreateEnterpriseSubscriptionLicenseKeyFunc: &StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc{
			defaultHook: i.CreateEnterpriseSubscriptionLicenseKey,
		},
		GenerateSubscriptionIDFunc: &StoreV1GenerateSubscriptionIDFunc{
			defaultHook: i.GenerateSubscriptionID,
		},
		GetEnterpriseSubscriptionFunc: &StoreV1GetEnterpriseSubscriptionFunc{
			defaultHook: i.GetEnterpriseSubscription,
		},
		GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc: &StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc{
			defaultHook: i.GetRequiredEnterpriseSubscriptionLicenseKeyTags,
		},
		GetSAMSUserByIDFunc: &StoreV1GetSAMSUserByIDFunc{
			defaultHook: i.GetSAMSUserByID,
		},
		IAMCheckFunc: &StoreV1IAMCheckFunc{
			defaultHook: i.IAMCheck,
		},
		IAMListObjectsFunc: &StoreV1IAMListObjectsFunc{
			defaultHook: i.IAMListObjects,
		},
		IAMWriteFunc: &StoreV1IAMWriteFunc{
			defaultHook: i.IAMWrite,
		},
		IntrospectSAMSTokenFunc: &StoreV1IntrospectSAMSTokenFunc{
			defaultHook: i.IntrospectSAMSToken,
		},
		ListEnterpriseSubscriptionLicensesFunc: &StoreV1ListEnterpriseSubscriptionLicensesFunc{
			defaultHook: i.ListEnterpriseSubscriptionLicenses,
		},
		ListEnterpriseSubscriptionsFunc: &StoreV1ListEnterpriseSubscriptionsFunc{
			defaultHook: i.ListEnterpriseSubscriptions,
		},
		NowFunc: &StoreV1NowFunc{
			defaultHook: i.Now,
		},
		RevokeEnterpriseSubscriptionLicenseFunc: &StoreV1RevokeEnterpriseSubscriptionLicenseFunc{
			defaultHook: i.RevokeEnterpriseSubscriptionLicense,
		},
		SignEnterpriseSubscriptionLicenseKeyFunc: &StoreV1SignEnterpriseSubscriptionLicenseKeyFunc{
			defaultHook: i.SignEnterpriseSubscriptionLicenseKey,
		},
		UpsertEnterpriseSubscriptionFunc: &StoreV1UpsertEnterpriseSubscriptionFunc{
			defaultHook: i.UpsertEnterpriseSubscription,
		},
	}
}

// StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc describes the behavior
// when the CreateEnterpriseSubscriptionLicenseKey method of the parent
// MockStoreV1 instance is invoked.
type StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc struct {
	defaultHook func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error)
	hooks       []func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error)
	history     []StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall
	mutex       sync.Mutex
}

// CreateEnterpriseSubscriptionLicenseKey delegates to the next hook
// function in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStoreV1) CreateEnterpriseSubscriptionLicenseKey(v0 context.Context, v1 string, v2 *subscriptions.DataLicenseKey, v3 subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
	r0, r1 := m.CreateEnterpriseSubscriptionLicenseKeyFunc.nextHook()(v0, v1, v2, v3)
	m.CreateEnterpriseSubscriptionLicenseKeyFunc.appendCall(StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// CreateEnterpriseSubscriptionLicenseKey method of the parent MockStoreV1
// instance is invoked and the hook queue is empty.
func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) SetDefaultHook(hook func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// CreateEnterpriseSubscriptionLicenseKey method of the parent MockStoreV1
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) PushHook(hook func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) SetDefaultReturn(r0 *subscriptions.LicenseWithConditions, r1 error) {
	f.SetDefaultHook(func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) PushReturn(r0 *subscriptions.LicenseWithConditions, r1 error) {
	f.PushHook(func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
		return r0, r1
	})
}

func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) nextHook() func(context.Context, string, *subscriptions.DataLicenseKey, subscriptions.CreateLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) appendCall(r0 StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall objects describing
// the invocations of this function.
func (f *StoreV1CreateEnterpriseSubscriptionLicenseKeyFunc) History() []StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall is an object that
// describes an invocation of method CreateEnterpriseSubscriptionLicenseKey
// on an instance of MockStoreV1.
type StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 *subscriptions.DataLicenseKey
	// Arg3 is the value of the 4th argument passed to this method
	// invocation.
	Arg3 subscriptions.CreateLicenseOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *subscriptions.LicenseWithConditions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2, c.Arg3}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1CreateEnterpriseSubscriptionLicenseKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1GenerateSubscriptionIDFunc describes the behavior when the
// GenerateSubscriptionID method of the parent MockStoreV1 instance is
// invoked.
type StoreV1GenerateSubscriptionIDFunc struct {
	defaultHook func() (string, error)
	hooks       []func() (string, error)
	history     []StoreV1GenerateSubscriptionIDFuncCall
	mutex       sync.Mutex
}

// GenerateSubscriptionID delegates to the next hook function in the queue
// and stores the parameter and result values of this invocation.
func (m *MockStoreV1) GenerateSubscriptionID() (string, error) {
	r0, r1 := m.GenerateSubscriptionIDFunc.nextHook()()
	m.GenerateSubscriptionIDFunc.appendCall(StoreV1GenerateSubscriptionIDFuncCall{r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GenerateSubscriptionID method of the parent MockStoreV1 instance is
// invoked and the hook queue is empty.
func (f *StoreV1GenerateSubscriptionIDFunc) SetDefaultHook(hook func() (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GenerateSubscriptionID method of the parent MockStoreV1 instance invokes
// the hook at the front of the queue and discards it. After the queue is
// empty, the default hook function is invoked for any future action.
func (f *StoreV1GenerateSubscriptionIDFunc) PushHook(hook func() (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1GenerateSubscriptionIDFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func() (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1GenerateSubscriptionIDFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func() (string, error) {
		return r0, r1
	})
}

func (f *StoreV1GenerateSubscriptionIDFunc) nextHook() func() (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1GenerateSubscriptionIDFunc) appendCall(r0 StoreV1GenerateSubscriptionIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1GenerateSubscriptionIDFuncCall
// objects describing the invocations of this function.
func (f *StoreV1GenerateSubscriptionIDFunc) History() []StoreV1GenerateSubscriptionIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1GenerateSubscriptionIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1GenerateSubscriptionIDFuncCall is an object that describes an
// invocation of method GenerateSubscriptionID on an instance of
// MockStoreV1.
type StoreV1GenerateSubscriptionIDFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1GenerateSubscriptionIDFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1GenerateSubscriptionIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1GetEnterpriseSubscriptionFunc describes the behavior when the
// GetEnterpriseSubscription method of the parent MockStoreV1 instance is
// invoked.
type StoreV1GetEnterpriseSubscriptionFunc struct {
	defaultHook func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error)
	hooks       []func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error)
	history     []StoreV1GetEnterpriseSubscriptionFuncCall
	mutex       sync.Mutex
}

// GetEnterpriseSubscription delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) GetEnterpriseSubscription(v0 context.Context, v1 string) (*subscriptions.SubscriptionWithConditions, error) {
	r0, r1 := m.GetEnterpriseSubscriptionFunc.nextHook()(v0, v1)
	m.GetEnterpriseSubscriptionFunc.appendCall(StoreV1GetEnterpriseSubscriptionFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// GetEnterpriseSubscription method of the parent MockStoreV1 instance is
// invoked and the hook queue is empty.
func (f *StoreV1GetEnterpriseSubscriptionFunc) SetDefaultHook(hook func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetEnterpriseSubscription method of the parent MockStoreV1 instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreV1GetEnterpriseSubscriptionFunc) PushHook(hook func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1GetEnterpriseSubscriptionFunc) SetDefaultReturn(r0 *subscriptions.SubscriptionWithConditions, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1GetEnterpriseSubscriptionFunc) PushReturn(r0 *subscriptions.SubscriptionWithConditions, r1 error) {
	f.PushHook(func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error) {
		return r0, r1
	})
}

func (f *StoreV1GetEnterpriseSubscriptionFunc) nextHook() func(context.Context, string) (*subscriptions.SubscriptionWithConditions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1GetEnterpriseSubscriptionFunc) appendCall(r0 StoreV1GetEnterpriseSubscriptionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1GetEnterpriseSubscriptionFuncCall
// objects describing the invocations of this function.
func (f *StoreV1GetEnterpriseSubscriptionFunc) History() []StoreV1GetEnterpriseSubscriptionFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1GetEnterpriseSubscriptionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1GetEnterpriseSubscriptionFuncCall is an object that describes an
// invocation of method GetEnterpriseSubscription on an instance of
// MockStoreV1.
type StoreV1GetEnterpriseSubscriptionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *subscriptions.SubscriptionWithConditions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1GetEnterpriseSubscriptionFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1GetEnterpriseSubscriptionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc describes the
// behavior when the GetRequiredEnterpriseSubscriptionLicenseKeyTags method
// of the parent MockStoreV1 instance is invoked.
type StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc struct {
	defaultHook func() []string
	hooks       []func() []string
	history     []StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall
	mutex       sync.Mutex
}

// GetRequiredEnterpriseSubscriptionLicenseKeyTags delegates to the next
// hook function in the queue and stores the parameter and result values of
// this invocation.
func (m *MockStoreV1) GetRequiredEnterpriseSubscriptionLicenseKeyTags() []string {
	r0 := m.GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc.nextHook()()
	m.GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc.appendCall(StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the
// GetRequiredEnterpriseSubscriptionLicenseKeyTags method of the parent
// MockStoreV1 instance is invoked and the hook queue is empty.
func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) SetDefaultHook(hook func() []string) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetRequiredEnterpriseSubscriptionLicenseKeyTags method of the parent
// MockStoreV1 instance invokes the hook at the front of the queue and
// discards it. After the queue is empty, the default hook function is
// invoked for any future action.
func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) PushHook(hook func() []string) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) SetDefaultReturn(r0 []string) {
	f.SetDefaultHook(func() []string {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) PushReturn(r0 []string) {
	f.PushHook(func() []string {
		return r0
	})
}

func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) nextHook() func() []string {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) appendCall(r0 StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall objects
// describing the invocations of this function.
func (f *StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFunc) History() []StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall is an
// object that describes an invocation of method
// GetRequiredEnterpriseSubscriptionLicenseKeyTags on an instance of
// MockStoreV1.
type StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1GetRequiredEnterpriseSubscriptionLicenseKeyTagsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreV1GetSAMSUserByIDFunc describes the behavior when the
// GetSAMSUserByID method of the parent MockStoreV1 instance is invoked.
type StoreV1GetSAMSUserByIDFunc struct {
	defaultHook func(context.Context, string) (*v1.User, error)
	hooks       []func(context.Context, string) (*v1.User, error)
	history     []StoreV1GetSAMSUserByIDFuncCall
	mutex       sync.Mutex
}

// GetSAMSUserByID delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStoreV1) GetSAMSUserByID(v0 context.Context, v1 string) (*v1.User, error) {
	r0, r1 := m.GetSAMSUserByIDFunc.nextHook()(v0, v1)
	m.GetSAMSUserByIDFunc.appendCall(StoreV1GetSAMSUserByIDFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the GetSAMSUserByID
// method of the parent MockStoreV1 instance is invoked and the hook queue
// is empty.
func (f *StoreV1GetSAMSUserByIDFunc) SetDefaultHook(hook func(context.Context, string) (*v1.User, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// GetSAMSUserByID method of the parent MockStoreV1 instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreV1GetSAMSUserByIDFunc) PushHook(hook func(context.Context, string) (*v1.User, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1GetSAMSUserByIDFunc) SetDefaultReturn(r0 *v1.User, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*v1.User, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1GetSAMSUserByIDFunc) PushReturn(r0 *v1.User, r1 error) {
	f.PushHook(func(context.Context, string) (*v1.User, error) {
		return r0, r1
	})
}

func (f *StoreV1GetSAMSUserByIDFunc) nextHook() func(context.Context, string) (*v1.User, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1GetSAMSUserByIDFunc) appendCall(r0 StoreV1GetSAMSUserByIDFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1GetSAMSUserByIDFuncCall objects
// describing the invocations of this function.
func (f *StoreV1GetSAMSUserByIDFunc) History() []StoreV1GetSAMSUserByIDFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1GetSAMSUserByIDFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1GetSAMSUserByIDFuncCall is an object that describes an invocation
// of method GetSAMSUserByID on an instance of MockStoreV1.
type StoreV1GetSAMSUserByIDFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *v1.User
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1GetSAMSUserByIDFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1GetSAMSUserByIDFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1IAMCheckFunc describes the behavior when the IAMCheck method of
// the parent MockStoreV1 instance is invoked.
type StoreV1IAMCheckFunc struct {
	defaultHook func(context.Context, iam.CheckOptions) (bool, error)
	hooks       []func(context.Context, iam.CheckOptions) (bool, error)
	history     []StoreV1IAMCheckFuncCall
	mutex       sync.Mutex
}

// IAMCheck delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStoreV1) IAMCheck(v0 context.Context, v1 iam.CheckOptions) (bool, error) {
	r0, r1 := m.IAMCheckFunc.nextHook()(v0, v1)
	m.IAMCheckFunc.appendCall(StoreV1IAMCheckFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IAMCheck method of
// the parent MockStoreV1 instance is invoked and the hook queue is empty.
func (f *StoreV1IAMCheckFunc) SetDefaultHook(hook func(context.Context, iam.CheckOptions) (bool, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IAMCheck method of the parent MockStoreV1 instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreV1IAMCheckFunc) PushHook(hook func(context.Context, iam.CheckOptions) (bool, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IAMCheckFunc) SetDefaultReturn(r0 bool, r1 error) {
	f.SetDefaultHook(func(context.Context, iam.CheckOptions) (bool, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IAMCheckFunc) PushReturn(r0 bool, r1 error) {
	f.PushHook(func(context.Context, iam.CheckOptions) (bool, error) {
		return r0, r1
	})
}

func (f *StoreV1IAMCheckFunc) nextHook() func(context.Context, iam.CheckOptions) (bool, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IAMCheckFunc) appendCall(r0 StoreV1IAMCheckFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IAMCheckFuncCall objects describing
// the invocations of this function.
func (f *StoreV1IAMCheckFunc) History() []StoreV1IAMCheckFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IAMCheckFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IAMCheckFuncCall is an object that describes an invocation of
// method IAMCheck on an instance of MockStoreV1.
type StoreV1IAMCheckFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 iam.CheckOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 bool
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IAMCheckFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IAMCheckFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1IAMListObjectsFunc describes the behavior when the IAMListObjects
// method of the parent MockStoreV1 instance is invoked.
type StoreV1IAMListObjectsFunc struct {
	defaultHook func(context.Context, iam.ListObjectsOptions) ([]string, error)
	hooks       []func(context.Context, iam.ListObjectsOptions) ([]string, error)
	history     []StoreV1IAMListObjectsFuncCall
	mutex       sync.Mutex
}

// IAMListObjects delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStoreV1) IAMListObjects(v0 context.Context, v1 iam.ListObjectsOptions) ([]string, error) {
	r0, r1 := m.IAMListObjectsFunc.nextHook()(v0, v1)
	m.IAMListObjectsFunc.appendCall(StoreV1IAMListObjectsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IAMListObjects
// method of the parent MockStoreV1 instance is invoked and the hook queue
// is empty.
func (f *StoreV1IAMListObjectsFunc) SetDefaultHook(hook func(context.Context, iam.ListObjectsOptions) ([]string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IAMListObjects method of the parent MockStoreV1 instance invokes the hook
// at the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreV1IAMListObjectsFunc) PushHook(hook func(context.Context, iam.ListObjectsOptions) ([]string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IAMListObjectsFunc) SetDefaultReturn(r0 []string, r1 error) {
	f.SetDefaultHook(func(context.Context, iam.ListObjectsOptions) ([]string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IAMListObjectsFunc) PushReturn(r0 []string, r1 error) {
	f.PushHook(func(context.Context, iam.ListObjectsOptions) ([]string, error) {
		return r0, r1
	})
}

func (f *StoreV1IAMListObjectsFunc) nextHook() func(context.Context, iam.ListObjectsOptions) ([]string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IAMListObjectsFunc) appendCall(r0 StoreV1IAMListObjectsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IAMListObjectsFuncCall objects
// describing the invocations of this function.
func (f *StoreV1IAMListObjectsFunc) History() []StoreV1IAMListObjectsFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IAMListObjectsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IAMListObjectsFuncCall is an object that describes an invocation
// of method IAMListObjects on an instance of MockStoreV1.
type StoreV1IAMListObjectsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 iam.ListObjectsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IAMListObjectsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IAMListObjectsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1IAMWriteFunc describes the behavior when the IAMWrite method of
// the parent MockStoreV1 instance is invoked.
type StoreV1IAMWriteFunc struct {
	defaultHook func(context.Context, iam.WriteOptions) error
	hooks       []func(context.Context, iam.WriteOptions) error
	history     []StoreV1IAMWriteFuncCall
	mutex       sync.Mutex
}

// IAMWrite delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStoreV1) IAMWrite(v0 context.Context, v1 iam.WriteOptions) error {
	r0 := m.IAMWriteFunc.nextHook()(v0, v1)
	m.IAMWriteFunc.appendCall(StoreV1IAMWriteFuncCall{v0, v1, r0})
	return r0
}

// SetDefaultHook sets function that is called when the IAMWrite method of
// the parent MockStoreV1 instance is invoked and the hook queue is empty.
func (f *StoreV1IAMWriteFunc) SetDefaultHook(hook func(context.Context, iam.WriteOptions) error) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IAMWrite method of the parent MockStoreV1 instance invokes the hook at
// the front of the queue and discards it. After the queue is empty, the
// default hook function is invoked for any future action.
func (f *StoreV1IAMWriteFunc) PushHook(hook func(context.Context, iam.WriteOptions) error) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IAMWriteFunc) SetDefaultReturn(r0 error) {
	f.SetDefaultHook(func(context.Context, iam.WriteOptions) error {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IAMWriteFunc) PushReturn(r0 error) {
	f.PushHook(func(context.Context, iam.WriteOptions) error {
		return r0
	})
}

func (f *StoreV1IAMWriteFunc) nextHook() func(context.Context, iam.WriteOptions) error {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IAMWriteFunc) appendCall(r0 StoreV1IAMWriteFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IAMWriteFuncCall objects describing
// the invocations of this function.
func (f *StoreV1IAMWriteFunc) History() []StoreV1IAMWriteFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IAMWriteFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IAMWriteFuncCall is an object that describes an invocation of
// method IAMWrite on an instance of MockStoreV1.
type StoreV1IAMWriteFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 iam.WriteOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IAMWriteFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IAMWriteFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreV1IntrospectSAMSTokenFunc describes the behavior when the
// IntrospectSAMSToken method of the parent MockStoreV1 instance is invoked.
type StoreV1IntrospectSAMSTokenFunc struct {
	defaultHook func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)
	hooks       []func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)
	history     []StoreV1IntrospectSAMSTokenFuncCall
	mutex       sync.Mutex
}

// IntrospectSAMSToken delegates to the next hook function in the queue and
// stores the parameter and result values of this invocation.
func (m *MockStoreV1) IntrospectSAMSToken(v0 context.Context, v1 string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
	r0, r1 := m.IntrospectSAMSTokenFunc.nextHook()(v0, v1)
	m.IntrospectSAMSTokenFunc.appendCall(StoreV1IntrospectSAMSTokenFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the IntrospectSAMSToken
// method of the parent MockStoreV1 instance is invoked and the hook queue
// is empty.
func (f *StoreV1IntrospectSAMSTokenFunc) SetDefaultHook(hook func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// IntrospectSAMSToken method of the parent MockStoreV1 instance invokes the
// hook at the front of the queue and discards it. After the queue is empty,
// the default hook function is invoked for any future action.
func (f *StoreV1IntrospectSAMSTokenFunc) PushHook(hook func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1IntrospectSAMSTokenFunc) SetDefaultReturn(r0 *sourcegraphaccountssdkgo.IntrospectTokenResponse, r1 error) {
	f.SetDefaultHook(func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1IntrospectSAMSTokenFunc) PushReturn(r0 *sourcegraphaccountssdkgo.IntrospectTokenResponse, r1 error) {
	f.PushHook(func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
		return r0, r1
	})
}

func (f *StoreV1IntrospectSAMSTokenFunc) nextHook() func(context.Context, string) (*sourcegraphaccountssdkgo.IntrospectTokenResponse, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1IntrospectSAMSTokenFunc) appendCall(r0 StoreV1IntrospectSAMSTokenFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1IntrospectSAMSTokenFuncCall objects
// describing the invocations of this function.
func (f *StoreV1IntrospectSAMSTokenFunc) History() []StoreV1IntrospectSAMSTokenFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1IntrospectSAMSTokenFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1IntrospectSAMSTokenFuncCall is an object that describes an
// invocation of method IntrospectSAMSToken on an instance of MockStoreV1.
type StoreV1IntrospectSAMSTokenFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *sourcegraphaccountssdkgo.IntrospectTokenResponse
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1IntrospectSAMSTokenFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1IntrospectSAMSTokenFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1ListEnterpriseSubscriptionLicensesFunc describes the behavior when
// the ListEnterpriseSubscriptionLicenses method of the parent MockStoreV1
// instance is invoked.
type StoreV1ListEnterpriseSubscriptionLicensesFunc struct {
	defaultHook func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error)
	hooks       []func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error)
	history     []StoreV1ListEnterpriseSubscriptionLicensesFuncCall
	mutex       sync.Mutex
}

// ListEnterpriseSubscriptionLicenses delegates to the next hook function in
// the queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) ListEnterpriseSubscriptionLicenses(v0 context.Context, v1 subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error) {
	r0, r1 := m.ListEnterpriseSubscriptionLicensesFunc.nextHook()(v0, v1)
	m.ListEnterpriseSubscriptionLicensesFunc.appendCall(StoreV1ListEnterpriseSubscriptionLicensesFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListEnterpriseSubscriptionLicenses method of the parent MockStoreV1
// instance is invoked and the hook queue is empty.
func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) SetDefaultHook(hook func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEnterpriseSubscriptionLicenses method of the parent MockStoreV1
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) PushHook(hook func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) SetDefaultReturn(r0 []*subscriptions.LicenseWithConditions, r1 error) {
	f.SetDefaultHook(func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) PushReturn(r0 []*subscriptions.LicenseWithConditions, r1 error) {
	f.PushHook(func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error) {
		return r0, r1
	})
}

func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) nextHook() func(context.Context, subscriptions.ListLicensesOpts) ([]*subscriptions.LicenseWithConditions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) appendCall(r0 StoreV1ListEnterpriseSubscriptionLicensesFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1ListEnterpriseSubscriptionLicensesFuncCall objects describing the
// invocations of this function.
func (f *StoreV1ListEnterpriseSubscriptionLicensesFunc) History() []StoreV1ListEnterpriseSubscriptionLicensesFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1ListEnterpriseSubscriptionLicensesFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1ListEnterpriseSubscriptionLicensesFuncCall is an object that
// describes an invocation of method ListEnterpriseSubscriptionLicenses on
// an instance of MockStoreV1.
type StoreV1ListEnterpriseSubscriptionLicensesFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 subscriptions.ListLicensesOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*subscriptions.LicenseWithConditions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1ListEnterpriseSubscriptionLicensesFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1ListEnterpriseSubscriptionLicensesFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1ListEnterpriseSubscriptionsFunc describes the behavior when the
// ListEnterpriseSubscriptions method of the parent MockStoreV1 instance is
// invoked.
type StoreV1ListEnterpriseSubscriptionsFunc struct {
	defaultHook func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error)
	hooks       []func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error)
	history     []StoreV1ListEnterpriseSubscriptionsFuncCall
	mutex       sync.Mutex
}

// ListEnterpriseSubscriptions delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) ListEnterpriseSubscriptions(v0 context.Context, v1 subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error) {
	r0, r1 := m.ListEnterpriseSubscriptionsFunc.nextHook()(v0, v1)
	m.ListEnterpriseSubscriptionsFunc.appendCall(StoreV1ListEnterpriseSubscriptionsFuncCall{v0, v1, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// ListEnterpriseSubscriptions method of the parent MockStoreV1 instance is
// invoked and the hook queue is empty.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) SetDefaultHook(hook func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// ListEnterpriseSubscriptions method of the parent MockStoreV1 instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) PushHook(hook func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) SetDefaultReturn(r0 []*subscriptions.SubscriptionWithConditions, r1 error) {
	f.SetDefaultHook(func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) PushReturn(r0 []*subscriptions.SubscriptionWithConditions, r1 error) {
	f.PushHook(func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error) {
		return r0, r1
	})
}

func (f *StoreV1ListEnterpriseSubscriptionsFunc) nextHook() func(context.Context, subscriptions.ListEnterpriseSubscriptionsOptions) ([]*subscriptions.SubscriptionWithConditions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1ListEnterpriseSubscriptionsFunc) appendCall(r0 StoreV1ListEnterpriseSubscriptionsFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1ListEnterpriseSubscriptionsFuncCall
// objects describing the invocations of this function.
func (f *StoreV1ListEnterpriseSubscriptionsFunc) History() []StoreV1ListEnterpriseSubscriptionsFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1ListEnterpriseSubscriptionsFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1ListEnterpriseSubscriptionsFuncCall is an object that describes an
// invocation of method ListEnterpriseSubscriptions on an instance of
// MockStoreV1.
type StoreV1ListEnterpriseSubscriptionsFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 subscriptions.ListEnterpriseSubscriptionsOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 []*subscriptions.SubscriptionWithConditions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1ListEnterpriseSubscriptionsFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1ListEnterpriseSubscriptionsFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1NowFunc describes the behavior when the Now method of the parent
// MockStoreV1 instance is invoked.
type StoreV1NowFunc struct {
	defaultHook func() utctime.Time
	hooks       []func() utctime.Time
	history     []StoreV1NowFuncCall
	mutex       sync.Mutex
}

// Now delegates to the next hook function in the queue and stores the
// parameter and result values of this invocation.
func (m *MockStoreV1) Now() utctime.Time {
	r0 := m.NowFunc.nextHook()()
	m.NowFunc.appendCall(StoreV1NowFuncCall{r0})
	return r0
}

// SetDefaultHook sets function that is called when the Now method of the
// parent MockStoreV1 instance is invoked and the hook queue is empty.
func (f *StoreV1NowFunc) SetDefaultHook(hook func() utctime.Time) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// Now method of the parent MockStoreV1 instance invokes the hook at the
// front of the queue and discards it. After the queue is empty, the default
// hook function is invoked for any future action.
func (f *StoreV1NowFunc) PushHook(hook func() utctime.Time) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1NowFunc) SetDefaultReturn(r0 utctime.Time) {
	f.SetDefaultHook(func() utctime.Time {
		return r0
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1NowFunc) PushReturn(r0 utctime.Time) {
	f.PushHook(func() utctime.Time {
		return r0
	})
}

func (f *StoreV1NowFunc) nextHook() func() utctime.Time {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1NowFunc) appendCall(r0 StoreV1NowFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1NowFuncCall objects describing the
// invocations of this function.
func (f *StoreV1NowFunc) History() []StoreV1NowFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1NowFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1NowFuncCall is an object that describes an invocation of method
// Now on an instance of MockStoreV1.
type StoreV1NowFuncCall struct {
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 utctime.Time
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1NowFuncCall) Args() []interface{} {
	return []interface{}{}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1NowFuncCall) Results() []interface{} {
	return []interface{}{c.Result0}
}

// StoreV1RevokeEnterpriseSubscriptionLicenseFunc describes the behavior
// when the RevokeEnterpriseSubscriptionLicense method of the parent
// MockStoreV1 instance is invoked.
type StoreV1RevokeEnterpriseSubscriptionLicenseFunc struct {
	defaultHook func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error)
	hooks       []func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error)
	history     []StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall
	mutex       sync.Mutex
}

// RevokeEnterpriseSubscriptionLicense delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStoreV1) RevokeEnterpriseSubscriptionLicense(v0 context.Context, v1 string, v2 subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
	r0, r1 := m.RevokeEnterpriseSubscriptionLicenseFunc.nextHook()(v0, v1, v2)
	m.RevokeEnterpriseSubscriptionLicenseFunc.appendCall(StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall{v0, v1, v2, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// RevokeEnterpriseSubscriptionLicense method of the parent MockStoreV1
// instance is invoked and the hook queue is empty.
func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) SetDefaultHook(hook func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// RevokeEnterpriseSubscriptionLicense method of the parent MockStoreV1
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) PushHook(hook func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) SetDefaultReturn(r0 *subscriptions.LicenseWithConditions, r1 error) {
	f.SetDefaultHook(func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) PushReturn(r0 *subscriptions.LicenseWithConditions, r1 error) {
	f.PushHook(func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
		return r0, r1
	})
}

func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) nextHook() func(context.Context, string, subscriptions.RevokeLicenseOpts) (*subscriptions.LicenseWithConditions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) appendCall(r0 StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall objects describing the
// invocations of this function.
func (f *StoreV1RevokeEnterpriseSubscriptionLicenseFunc) History() []StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall is an object that
// describes an invocation of method RevokeEnterpriseSubscriptionLicense on
// an instance of MockStoreV1.
type StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 subscriptions.RevokeLicenseOpts
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *subscriptions.LicenseWithConditions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0, c.Arg1, c.Arg2}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1RevokeEnterpriseSubscriptionLicenseFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1SignEnterpriseSubscriptionLicenseKeyFunc describes the behavior
// when the SignEnterpriseSubscriptionLicenseKey method of the parent
// MockStoreV1 instance is invoked.
type StoreV1SignEnterpriseSubscriptionLicenseKeyFunc struct {
	defaultHook func(license.Info) (string, error)
	hooks       []func(license.Info) (string, error)
	history     []StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall
	mutex       sync.Mutex
}

// SignEnterpriseSubscriptionLicenseKey delegates to the next hook function
// in the queue and stores the parameter and result values of this
// invocation.
func (m *MockStoreV1) SignEnterpriseSubscriptionLicenseKey(v0 license.Info) (string, error) {
	r0, r1 := m.SignEnterpriseSubscriptionLicenseKeyFunc.nextHook()(v0)
	m.SignEnterpriseSubscriptionLicenseKeyFunc.appendCall(StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall{v0, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// SignEnterpriseSubscriptionLicenseKey method of the parent MockStoreV1
// instance is invoked and the hook queue is empty.
func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) SetDefaultHook(hook func(license.Info) (string, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// SignEnterpriseSubscriptionLicenseKey method of the parent MockStoreV1
// instance invokes the hook at the front of the queue and discards it.
// After the queue is empty, the default hook function is invoked for any
// future action.
func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) PushHook(hook func(license.Info) (string, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) SetDefaultReturn(r0 string, r1 error) {
	f.SetDefaultHook(func(license.Info) (string, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) PushReturn(r0 string, r1 error) {
	f.PushHook(func(license.Info) (string, error) {
		return r0, r1
	})
}

func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) nextHook() func(license.Info) (string, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) appendCall(r0 StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of
// StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall objects describing
// the invocations of this function.
func (f *StoreV1SignEnterpriseSubscriptionLicenseKeyFunc) History() []StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall is an object that
// describes an invocation of method SignEnterpriseSubscriptionLicenseKey on
// an instance of MockStoreV1.
type StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 license.Info
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 string
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation.
func (c StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall) Args() []interface{} {
	return []interface{}{c.Arg0}
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1SignEnterpriseSubscriptionLicenseKeyFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}

// StoreV1UpsertEnterpriseSubscriptionFunc describes the behavior when the
// UpsertEnterpriseSubscription method of the parent MockStoreV1 instance is
// invoked.
type StoreV1UpsertEnterpriseSubscriptionFunc struct {
	defaultHook func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error)
	hooks       []func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error)
	history     []StoreV1UpsertEnterpriseSubscriptionFuncCall
	mutex       sync.Mutex
}

// UpsertEnterpriseSubscription delegates to the next hook function in the
// queue and stores the parameter and result values of this invocation.
func (m *MockStoreV1) UpsertEnterpriseSubscription(v0 context.Context, v1 string, v2 subscriptions.UpsertSubscriptionOptions, v3 ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error) {
	r0, r1 := m.UpsertEnterpriseSubscriptionFunc.nextHook()(v0, v1, v2, v3...)
	m.UpsertEnterpriseSubscriptionFunc.appendCall(StoreV1UpsertEnterpriseSubscriptionFuncCall{v0, v1, v2, v3, r0, r1})
	return r0, r1
}

// SetDefaultHook sets function that is called when the
// UpsertEnterpriseSubscription method of the parent MockStoreV1 instance is
// invoked and the hook queue is empty.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) SetDefaultHook(hook func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error)) {
	f.defaultHook = hook
}

// PushHook adds a function to the end of hook queue. Each invocation of the
// UpsertEnterpriseSubscription method of the parent MockStoreV1 instance
// invokes the hook at the front of the queue and discards it. After the
// queue is empty, the default hook function is invoked for any future
// action.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) PushHook(hook func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error)) {
	f.mutex.Lock()
	f.hooks = append(f.hooks, hook)
	f.mutex.Unlock()
}

// SetDefaultReturn calls SetDefaultHook with a function that returns the
// given values.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) SetDefaultReturn(r0 *subscriptions.SubscriptionWithConditions, r1 error) {
	f.SetDefaultHook(func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error) {
		return r0, r1
	})
}

// PushReturn calls PushHook with a function that returns the given values.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) PushReturn(r0 *subscriptions.SubscriptionWithConditions, r1 error) {
	f.PushHook(func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error) {
		return r0, r1
	})
}

func (f *StoreV1UpsertEnterpriseSubscriptionFunc) nextHook() func(context.Context, string, subscriptions.UpsertSubscriptionOptions, ...subscriptions.CreateSubscriptionConditionOptions) (*subscriptions.SubscriptionWithConditions, error) {
	f.mutex.Lock()
	defer f.mutex.Unlock()

	if len(f.hooks) == 0 {
		return f.defaultHook
	}

	hook := f.hooks[0]
	f.hooks = f.hooks[1:]
	return hook
}

func (f *StoreV1UpsertEnterpriseSubscriptionFunc) appendCall(r0 StoreV1UpsertEnterpriseSubscriptionFuncCall) {
	f.mutex.Lock()
	f.history = append(f.history, r0)
	f.mutex.Unlock()
}

// History returns a sequence of StoreV1UpsertEnterpriseSubscriptionFuncCall
// objects describing the invocations of this function.
func (f *StoreV1UpsertEnterpriseSubscriptionFunc) History() []StoreV1UpsertEnterpriseSubscriptionFuncCall {
	f.mutex.Lock()
	history := make([]StoreV1UpsertEnterpriseSubscriptionFuncCall, len(f.history))
	copy(history, f.history)
	f.mutex.Unlock()

	return history
}

// StoreV1UpsertEnterpriseSubscriptionFuncCall is an object that describes
// an invocation of method UpsertEnterpriseSubscription on an instance of
// MockStoreV1.
type StoreV1UpsertEnterpriseSubscriptionFuncCall struct {
	// Arg0 is the value of the 1st argument passed to this method
	// invocation.
	Arg0 context.Context
	// Arg1 is the value of the 2nd argument passed to this method
	// invocation.
	Arg1 string
	// Arg2 is the value of the 3rd argument passed to this method
	// invocation.
	Arg2 subscriptions.UpsertSubscriptionOptions
	// Arg3 is a slice containing the values of the variadic arguments
	// passed to this method invocation.
	Arg3 []subscriptions.CreateSubscriptionConditionOptions
	// Result0 is the value of the 1st result returned from this method
	// invocation.
	Result0 *subscriptions.SubscriptionWithConditions
	// Result1 is the value of the 2nd result returned from this method
	// invocation.
	Result1 error
}

// Args returns an interface slice containing the arguments of this
// invocation. The variadic slice argument is flattened in this array such
// that one positional argument and three variadic arguments would result in
// a slice of four, not two.
func (c StoreV1UpsertEnterpriseSubscriptionFuncCall) Args() []interface{} {
	trailing := []interface{}{}
	for _, val := range c.Arg3 {
		trailing = append(trailing, val)
	}

	return append([]interface{}{c.Arg0, c.Arg1, c.Arg2}, trailing...)
}

// Results returns an interface slice containing the results of this
// invocation.
func (c StoreV1UpsertEnterpriseSubscriptionFuncCall) Results() []interface{} {
	return []interface{}{c.Result0, c.Result1}
}
