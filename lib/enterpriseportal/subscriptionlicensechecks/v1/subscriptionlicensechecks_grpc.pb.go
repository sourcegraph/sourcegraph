// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: subscriptionlicensechecks.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SubscriptionLicenseChecksService_CheckLicenseKey_FullMethodName = "/enterpriseportal.subscriptionlicensechecks.v1.SubscriptionLicenseChecksService/CheckLicenseKey"
)

// SubscriptionLicenseChecksServiceClient is the client API for SubscriptionLicenseChecksService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubscriptionLicenseChecksServiceClient interface {
	// CheckLicenseKey returns the status of a license key. It expects bearer
	// authorization with a token of the format 'slk_$hex($sha256(licenseKey))'.
	CheckLicenseKey(ctx context.Context, in *CheckLicenseKeyRequest, opts ...grpc.CallOption) (*CheckLicenseKeyResponse, error)
}

type subscriptionLicenseChecksServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSubscriptionLicenseChecksServiceClient(cc grpc.ClientConnInterface) SubscriptionLicenseChecksServiceClient {
	return &subscriptionLicenseChecksServiceClient{cc}
}

func (c *subscriptionLicenseChecksServiceClient) CheckLicenseKey(ctx context.Context, in *CheckLicenseKeyRequest, opts ...grpc.CallOption) (*CheckLicenseKeyResponse, error) {
	out := new(CheckLicenseKeyResponse)
	err := c.cc.Invoke(ctx, SubscriptionLicenseChecksService_CheckLicenseKey_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscriptionLicenseChecksServiceServer is the server API for SubscriptionLicenseChecksService service.
// All implementations must embed UnimplementedSubscriptionLicenseChecksServiceServer
// for forward compatibility
type SubscriptionLicenseChecksServiceServer interface {
	// CheckLicenseKey returns the status of a license key. It expects bearer
	// authorization with a token of the format 'slk_$hex($sha256(licenseKey))'.
	CheckLicenseKey(context.Context, *CheckLicenseKeyRequest) (*CheckLicenseKeyResponse, error)
	mustEmbedUnimplementedSubscriptionLicenseChecksServiceServer()
}

// UnimplementedSubscriptionLicenseChecksServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSubscriptionLicenseChecksServiceServer struct {
}

func (UnimplementedSubscriptionLicenseChecksServiceServer) CheckLicenseKey(context.Context, *CheckLicenseKeyRequest) (*CheckLicenseKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLicenseKey not implemented")
}
func (UnimplementedSubscriptionLicenseChecksServiceServer) mustEmbedUnimplementedSubscriptionLicenseChecksServiceServer() {
}

// UnsafeSubscriptionLicenseChecksServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubscriptionLicenseChecksServiceServer will
// result in compilation errors.
type UnsafeSubscriptionLicenseChecksServiceServer interface {
	mustEmbedUnimplementedSubscriptionLicenseChecksServiceServer()
}

func RegisterSubscriptionLicenseChecksServiceServer(s grpc.ServiceRegistrar, srv SubscriptionLicenseChecksServiceServer) {
	s.RegisterService(&SubscriptionLicenseChecksService_ServiceDesc, srv)
}

func _SubscriptionLicenseChecksService_CheckLicenseKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckLicenseKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscriptionLicenseChecksServiceServer).CheckLicenseKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SubscriptionLicenseChecksService_CheckLicenseKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscriptionLicenseChecksServiceServer).CheckLicenseKey(ctx, req.(*CheckLicenseKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubscriptionLicenseChecksService_ServiceDesc is the grpc.ServiceDesc for SubscriptionLicenseChecksService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubscriptionLicenseChecksService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "enterpriseportal.subscriptionlicensechecks.v1.SubscriptionLicenseChecksService",
	HandlerType: (*SubscriptionLicenseChecksServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckLicenseKey",
			Handler:    _SubscriptionLicenseChecksService_CheckLicenseKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscriptionlicensechecks.proto",
}
