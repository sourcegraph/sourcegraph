// Copyright 2018 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        (unknown)
// source: spawn.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Digest of a file or action cache entry.
type Digest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The content hash as a lowercase hex string including any leading zeroes.
	Hash string `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	// The original content size in bytes.
	SizeBytes int64 `protobuf:"varint,2,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// The name of the digest function used to compute the hash.
	HashFunctionName string `protobuf:"bytes,3,opt,name=hash_function_name,json=hashFunctionName,proto3" json:"hash_function_name,omitempty"`
}

func (x *Digest) Reset() {
	*x = Digest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Digest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Digest) ProtoMessage() {}

func (x *Digest) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Digest.ProtoReflect.Descriptor instead.
func (*Digest) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{0}
}

func (x *Digest) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Digest) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *Digest) GetHashFunctionName() string {
	if x != nil {
		return x.HashFunctionName
	}
	return ""
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Path to the file relative to the execution root.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// Symlink target path.
	// Only set for unresolved symlinks.
	SymlinkTargetPath string `protobuf:"bytes,4,opt,name=symlink_target_path,json=symlinkTargetPath,proto3" json:"symlink_target_path,omitempty"`
	// File digest.
	// Always omitted for unresolved symlinks. May be omitted for empty files.
	Digest *Digest `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	// Whether the file is a tool.
	// Only set for inputs, never for outputs.
	IsTool bool `protobuf:"varint,3,opt,name=is_tool,json=isTool,proto3" json:"is_tool,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{1}
}

func (x *File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *File) GetSymlinkTargetPath() string {
	if x != nil {
		return x.SymlinkTargetPath
	}
	return ""
}

func (x *File) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *File) GetIsTool() bool {
	if x != nil {
		return x.IsTool
	}
	return false
}

// Contents of command environment.
type EnvironmentVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvironmentVariable) Reset() {
	*x = EnvironmentVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvironmentVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvironmentVariable) ProtoMessage() {}

func (x *EnvironmentVariable) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvironmentVariable.ProtoReflect.Descriptor instead.
func (*EnvironmentVariable) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{2}
}

func (x *EnvironmentVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvironmentVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Command execution platform. This message needs to be kept in sync
// with [Platform][google.devtools.remoteexecution.v1test.Platform].
type Platform struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Properties []*Platform_Property `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Platform) Reset() {
	*x = Platform{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform) ProtoMessage() {}

func (x *Platform) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform.ProtoReflect.Descriptor instead.
func (*Platform) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{3}
}

func (x *Platform) GetProperties() []*Platform_Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

// Timing, size, and memory statistics for a SpawnExec.
type SpawnMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Total wall time spent running a spawn, measured locally.
	TotalTime *durationpb.Duration `protobuf:"bytes,1,opt,name=total_time,json=totalTime,proto3" json:"total_time,omitempty"`
	// Time taken to convert the spawn into a network request.
	ParseTime *durationpb.Duration `protobuf:"bytes,2,opt,name=parse_time,json=parseTime,proto3" json:"parse_time,omitempty"`
	// Time spent communicating over the network.
	NetworkTime *durationpb.Duration `protobuf:"bytes,3,opt,name=network_time,json=networkTime,proto3" json:"network_time,omitempty"`
	// Time spent fetching remote outputs.
	FetchTime *durationpb.Duration `protobuf:"bytes,4,opt,name=fetch_time,json=fetchTime,proto3" json:"fetch_time,omitempty"`
	// Time spent waiting in queues.
	QueueTime *durationpb.Duration `protobuf:"bytes,5,opt,name=queue_time,json=queueTime,proto3" json:"queue_time,omitempty"`
	// Time spent setting up the environment in which the spawn is run.
	SetupTime *durationpb.Duration `protobuf:"bytes,6,opt,name=setup_time,json=setupTime,proto3" json:"setup_time,omitempty"`
	// Time spent uploading outputs to a remote store.
	UploadTime *durationpb.Duration `protobuf:"bytes,7,opt,name=upload_time,json=uploadTime,proto3" json:"upload_time,omitempty"`
	// Time spent running the subprocess.
	ExecutionWallTime *durationpb.Duration `protobuf:"bytes,8,opt,name=execution_wall_time,json=executionWallTime,proto3" json:"execution_wall_time,omitempty"`
	// Time spent by the execution framework processing outputs.
	ProcessOutputsTime *durationpb.Duration `protobuf:"bytes,9,opt,name=process_outputs_time,json=processOutputsTime,proto3" json:"process_outputs_time,omitempty"`
	// Time spent in previous failed attempts, not including queue time.
	RetryTime *durationpb.Duration `protobuf:"bytes,10,opt,name=retry_time,json=retryTime,proto3" json:"retry_time,omitempty"`
	// Total size in bytes of inputs or 0 if unavailable.
	InputBytes int64 `protobuf:"varint,11,opt,name=input_bytes,json=inputBytes,proto3" json:"input_bytes,omitempty"`
	// Total number of input files or 0 if unavailable.
	InputFiles int64 `protobuf:"varint,12,opt,name=input_files,json=inputFiles,proto3" json:"input_files,omitempty"`
	// Estimated memory usage or 0 if unavailable.
	MemoryEstimateBytes int64 `protobuf:"varint,13,opt,name=memory_estimate_bytes,json=memoryEstimateBytes,proto3" json:"memory_estimate_bytes,omitempty"`
	// Limit of total size of inputs or 0 if unavailable.
	InputBytesLimit int64 `protobuf:"varint,14,opt,name=input_bytes_limit,json=inputBytesLimit,proto3" json:"input_bytes_limit,omitempty"`
	// Limit of total number of input files or 0 if unavailable.
	InputFilesLimit int64 `protobuf:"varint,15,opt,name=input_files_limit,json=inputFilesLimit,proto3" json:"input_files_limit,omitempty"`
	// Limit of total size of outputs or 0 if unavailable.
	OutputBytesLimit int64 `protobuf:"varint,16,opt,name=output_bytes_limit,json=outputBytesLimit,proto3" json:"output_bytes_limit,omitempty"`
	// Limit of total number of output files or 0 if unavailable.
	OutputFilesLimit int64 `protobuf:"varint,17,opt,name=output_files_limit,json=outputFilesLimit,proto3" json:"output_files_limit,omitempty"`
	// Memory limit or 0 if unavailable.
	MemoryBytesLimit int64 `protobuf:"varint,18,opt,name=memory_bytes_limit,json=memoryBytesLimit,proto3" json:"memory_bytes_limit,omitempty"`
	// Time limit or 0 if unavailable.
	TimeLimit *durationpb.Duration `protobuf:"bytes,19,opt,name=time_limit,json=timeLimit,proto3" json:"time_limit,omitempty"`
	// Instant when the spawn started to execute.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,20,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
}

func (x *SpawnMetrics) Reset() {
	*x = SpawnMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpawnMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnMetrics) ProtoMessage() {}

func (x *SpawnMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnMetrics.ProtoReflect.Descriptor instead.
func (*SpawnMetrics) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{4}
}

func (x *SpawnMetrics) GetTotalTime() *durationpb.Duration {
	if x != nil {
		return x.TotalTime
	}
	return nil
}

func (x *SpawnMetrics) GetParseTime() *durationpb.Duration {
	if x != nil {
		return x.ParseTime
	}
	return nil
}

func (x *SpawnMetrics) GetNetworkTime() *durationpb.Duration {
	if x != nil {
		return x.NetworkTime
	}
	return nil
}

func (x *SpawnMetrics) GetFetchTime() *durationpb.Duration {
	if x != nil {
		return x.FetchTime
	}
	return nil
}

func (x *SpawnMetrics) GetQueueTime() *durationpb.Duration {
	if x != nil {
		return x.QueueTime
	}
	return nil
}

func (x *SpawnMetrics) GetSetupTime() *durationpb.Duration {
	if x != nil {
		return x.SetupTime
	}
	return nil
}

func (x *SpawnMetrics) GetUploadTime() *durationpb.Duration {
	if x != nil {
		return x.UploadTime
	}
	return nil
}

func (x *SpawnMetrics) GetExecutionWallTime() *durationpb.Duration {
	if x != nil {
		return x.ExecutionWallTime
	}
	return nil
}

func (x *SpawnMetrics) GetProcessOutputsTime() *durationpb.Duration {
	if x != nil {
		return x.ProcessOutputsTime
	}
	return nil
}

func (x *SpawnMetrics) GetRetryTime() *durationpb.Duration {
	if x != nil {
		return x.RetryTime
	}
	return nil
}

func (x *SpawnMetrics) GetInputBytes() int64 {
	if x != nil {
		return x.InputBytes
	}
	return 0
}

func (x *SpawnMetrics) GetInputFiles() int64 {
	if x != nil {
		return x.InputFiles
	}
	return 0
}

func (x *SpawnMetrics) GetMemoryEstimateBytes() int64 {
	if x != nil {
		return x.MemoryEstimateBytes
	}
	return 0
}

func (x *SpawnMetrics) GetInputBytesLimit() int64 {
	if x != nil {
		return x.InputBytesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetInputFilesLimit() int64 {
	if x != nil {
		return x.InputFilesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetOutputBytesLimit() int64 {
	if x != nil {
		return x.OutputBytesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetOutputFilesLimit() int64 {
	if x != nil {
		return x.OutputFilesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetMemoryBytesLimit() int64 {
	if x != nil {
		return x.MemoryBytesLimit
	}
	return 0
}

func (x *SpawnMetrics) GetTimeLimit() *durationpb.Duration {
	if x != nil {
		return x.TimeLimit
	}
	return nil
}

func (x *SpawnMetrics) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

// Each message contains an executed command, its full inputs and outputs, and
// other information. This format is relatively costly to produce and results
// in very large files, due to the amount of repeated information. The
// --experimental_execution_log_compact_file format provides a better
// alternative.
type SpawnExec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The command that was run.
	CommandArgs []string `protobuf:"bytes,1,rep,name=command_args,json=commandArgs,proto3" json:"command_args,omitempty"`
	// The command environment.
	EnvironmentVariables []*EnvironmentVariable `protobuf:"bytes,2,rep,name=environment_variables,json=environmentVariables,proto3" json:"environment_variables,omitempty"`
	// The command execution platform.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// The inputs at the time of the execution.
	Inputs []*File `protobuf:"bytes,4,rep,name=inputs,proto3" json:"inputs,omitempty"`
	// All the listed outputs paths. The paths are relative to the execution root.
	// Actual outputs are a subset of the listed outputs. These paths are sorted.
	ListedOutputs []string `protobuf:"bytes,5,rep,name=listed_outputs,json=listedOutputs,proto3" json:"listed_outputs,omitempty"`
	// Whether the spawn was allowed to run remotely.
	Remotable bool `protobuf:"varint,6,opt,name=remotable,proto3" json:"remotable,omitempty"`
	// Whether the spawn was allowed to be cached.
	Cacheable bool `protobuf:"varint,7,opt,name=cacheable,proto3" json:"cacheable,omitempty"`
	// The spawn timeout.
	TimeoutMillis int64 `protobuf:"varint,8,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
	// The mnemonic of the action this spawn belongs to.
	Mnemonic string `protobuf:"bytes,10,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// The outputs generated by the execution.
	// In order for one of the listed_outputs to appear here, it must have been
	// produced and have the expected type (file, directory or symlink).
	ActualOutputs []*File `protobuf:"bytes,11,rep,name=actual_outputs,json=actualOutputs,proto3" json:"actual_outputs,omitempty"`
	// If the spawn did not hit a disk or remote cache, this will be the name of
	// the runner, e.g. "remote", "linux-sandbox" or "worker".
	//
	// If the spawn hit a disk or remote cache, this will be "disk cache hit" or
	// "remote cache hit", respectively. This includes the case where a remote
	// cache was hit while executing the spawn remotely.
	//
	// Note that spawns whose owning action hits the persistent action cache
	// are never reported at all.
	//
	// This won't always match the spawn strategy. For the dynamic strategy, it
	// will be the runner for the first branch to complete. For the remote
	// strategy, it might be a local runner in case of a fallback.
	Runner string `protobuf:"bytes,12,opt,name=runner,proto3" json:"runner,omitempty"`
	// Whether the spawn hit a disk or remote cache.
	CacheHit bool `protobuf:"varint,13,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	// A text status describing an execution error. Empty in case of success.
	Status string `protobuf:"bytes,14,opt,name=status,proto3" json:"status,omitempty"`
	// This field contains the contents of SpawnResult.exitCode.
	// Its semantics varies greatly depending on the status field.
	// Dependable: if status is empty, exit_code is guaranteed to be zero.
	ExitCode int32 `protobuf:"varint,15,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Whether the spawn was allowed to be cached remotely.
	RemoteCacheable bool `protobuf:"varint,16,opt,name=remote_cacheable,json=remoteCacheable,proto3" json:"remote_cacheable,omitempty"`
	// The canonical label of the target this spawn belongs to.
	TargetLabel string `protobuf:"bytes,18,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// The action cache digest.
	// Only available when remote execution, remote cache or disk cache was
	// enabled for this spawn.
	Digest *Digest `protobuf:"bytes,19,opt,name=digest,proto3" json:"digest,omitempty"`
	// Timing, size and memory statistics.
	Metrics *SpawnMetrics `protobuf:"bytes,20,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *SpawnExec) Reset() {
	*x = SpawnExec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpawnExec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpawnExec) ProtoMessage() {}

func (x *SpawnExec) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpawnExec.ProtoReflect.Descriptor instead.
func (*SpawnExec) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{5}
}

func (x *SpawnExec) GetCommandArgs() []string {
	if x != nil {
		return x.CommandArgs
	}
	return nil
}

func (x *SpawnExec) GetEnvironmentVariables() []*EnvironmentVariable {
	if x != nil {
		return x.EnvironmentVariables
	}
	return nil
}

func (x *SpawnExec) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *SpawnExec) GetInputs() []*File {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *SpawnExec) GetListedOutputs() []string {
	if x != nil {
		return x.ListedOutputs
	}
	return nil
}

func (x *SpawnExec) GetRemotable() bool {
	if x != nil {
		return x.Remotable
	}
	return false
}

func (x *SpawnExec) GetCacheable() bool {
	if x != nil {
		return x.Cacheable
	}
	return false
}

func (x *SpawnExec) GetTimeoutMillis() int64 {
	if x != nil {
		return x.TimeoutMillis
	}
	return 0
}

func (x *SpawnExec) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *SpawnExec) GetActualOutputs() []*File {
	if x != nil {
		return x.ActualOutputs
	}
	return nil
}

func (x *SpawnExec) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *SpawnExec) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *SpawnExec) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *SpawnExec) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *SpawnExec) GetRemoteCacheable() bool {
	if x != nil {
		return x.RemoteCacheable
	}
	return false
}

func (x *SpawnExec) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *SpawnExec) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *SpawnExec) GetMetrics() *SpawnMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

// An entry in the compact log format.
// This is the format generated by --experimental_execution_log_compact_file.
//
// Each entry describes either an executed spawn or a piece of data referenced
// by other entries. This considerably reduces the runtime overhead and the size
// of the log when compared to the --execution_log_{binary,json}_file formats.
//
// To ensure that the log can be parsed in a single pass, every entry must be
// serialized after all other entries it references by ID. However, entries
// aren't guaranteed to be serialized in increasing ID order.
//
// Entries other than spawns may not be assumed to be canonical. For performance
// reasons, the same file, directory or input set may be serialized multiple
// times with a different ID.
type ExecLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The entry ID. Must be nonzero.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The entry payload.
	//
	// Types that are assignable to Type:
	//
	//	*ExecLogEntry_Invocation_
	//	*ExecLogEntry_File_
	//	*ExecLogEntry_Directory_
	//	*ExecLogEntry_UnresolvedSymlink_
	//	*ExecLogEntry_InputSet_
	//	*ExecLogEntry_Spawn_
	Type isExecLogEntry_Type `protobuf_oneof:"type"`
}

func (x *ExecLogEntry) Reset() {
	*x = ExecLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry) ProtoMessage() {}

func (x *ExecLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry.ProtoReflect.Descriptor instead.
func (*ExecLogEntry) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6}
}

func (x *ExecLogEntry) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (m *ExecLogEntry) GetType() isExecLogEntry_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ExecLogEntry) GetInvocation() *ExecLogEntry_Invocation {
	if x, ok := x.GetType().(*ExecLogEntry_Invocation_); ok {
		return x.Invocation
	}
	return nil
}

func (x *ExecLogEntry) GetFile() *ExecLogEntry_File {
	if x, ok := x.GetType().(*ExecLogEntry_File_); ok {
		return x.File
	}
	return nil
}

func (x *ExecLogEntry) GetDirectory() *ExecLogEntry_Directory {
	if x, ok := x.GetType().(*ExecLogEntry_Directory_); ok {
		return x.Directory
	}
	return nil
}

func (x *ExecLogEntry) GetUnresolvedSymlink() *ExecLogEntry_UnresolvedSymlink {
	if x, ok := x.GetType().(*ExecLogEntry_UnresolvedSymlink_); ok {
		return x.UnresolvedSymlink
	}
	return nil
}

func (x *ExecLogEntry) GetInputSet() *ExecLogEntry_InputSet {
	if x, ok := x.GetType().(*ExecLogEntry_InputSet_); ok {
		return x.InputSet
	}
	return nil
}

func (x *ExecLogEntry) GetSpawn() *ExecLogEntry_Spawn {
	if x, ok := x.GetType().(*ExecLogEntry_Spawn_); ok {
		return x.Spawn
	}
	return nil
}

type isExecLogEntry_Type interface {
	isExecLogEntry_Type()
}

type ExecLogEntry_Invocation_ struct {
	Invocation *ExecLogEntry_Invocation `protobuf:"bytes,2,opt,name=invocation,proto3,oneof"`
}

type ExecLogEntry_File_ struct {
	File *ExecLogEntry_File `protobuf:"bytes,3,opt,name=file,proto3,oneof"`
}

type ExecLogEntry_Directory_ struct {
	Directory *ExecLogEntry_Directory `protobuf:"bytes,4,opt,name=directory,proto3,oneof"`
}

type ExecLogEntry_UnresolvedSymlink_ struct {
	UnresolvedSymlink *ExecLogEntry_UnresolvedSymlink `protobuf:"bytes,5,opt,name=unresolved_symlink,json=unresolvedSymlink,proto3,oneof"`
}

type ExecLogEntry_InputSet_ struct {
	InputSet *ExecLogEntry_InputSet `protobuf:"bytes,6,opt,name=input_set,json=inputSet,proto3,oneof"`
}

type ExecLogEntry_Spawn_ struct {
	Spawn *ExecLogEntry_Spawn `protobuf:"bytes,7,opt,name=spawn,proto3,oneof"`
}

func (*ExecLogEntry_Invocation_) isExecLogEntry_Type() {}

func (*ExecLogEntry_File_) isExecLogEntry_Type() {}

func (*ExecLogEntry_Directory_) isExecLogEntry_Type() {}

func (*ExecLogEntry_UnresolvedSymlink_) isExecLogEntry_Type() {}

func (*ExecLogEntry_InputSet_) isExecLogEntry_Type() {}

func (*ExecLogEntry_Spawn_) isExecLogEntry_Type() {}

type Platform_Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Platform_Property) Reset() {
	*x = Platform_Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Platform_Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Platform_Property) ProtoMessage() {}

func (x *Platform_Property) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Platform_Property.ProtoReflect.Descriptor instead.
func (*Platform_Property) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Platform_Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Platform_Property) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Information pertaining to the entire invocation.
// May appear at most once in the initial position.
type ExecLogEntry_Invocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The hash function used to compute digests.
	HashFunctionName string `protobuf:"bytes,1,opt,name=hash_function_name,json=hashFunctionName,proto3" json:"hash_function_name,omitempty"`
}

func (x *ExecLogEntry_Invocation) Reset() {
	*x = ExecLogEntry_Invocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_Invocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Invocation) ProtoMessage() {}

func (x *ExecLogEntry_Invocation) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Invocation.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Invocation) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 0}
}

func (x *ExecLogEntry_Invocation) GetHashFunctionName() string {
	if x != nil {
		return x.HashFunctionName
	}
	return ""
}

// An input or output file.
type ExecLogEntry_File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The file path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// A digest of the file contents.
	// The hash function name is omitted. It can be obtained from Invocation.
	// May be omitted for empty files.
	Digest *Digest `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ExecLogEntry_File) Reset() {
	*x = ExecLogEntry_File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_File) ProtoMessage() {}

func (x *ExecLogEntry_File) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_File.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_File) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 1}
}

func (x *ExecLogEntry_File) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_File) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

// An input or output directory.
// May be a source directory, a runfiles or fileset tree, or a tree artifact.
type ExecLogEntry_Directory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The directory path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The contained files, whose paths are relative to the directory.
	Files []*ExecLogEntry_File `protobuf:"bytes,2,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *ExecLogEntry_Directory) Reset() {
	*x = ExecLogEntry_Directory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_Directory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Directory) ProtoMessage() {}

func (x *ExecLogEntry_Directory) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Directory.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Directory) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 2}
}

func (x *ExecLogEntry_Directory) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_Directory) GetFiles() []*ExecLogEntry_File {
	if x != nil {
		return x.Files
	}
	return nil
}

// An unresolved symlink.
type ExecLogEntry_UnresolvedSymlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The symlink path.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The path the symlink points to.
	TargetPath string `protobuf:"bytes,2,opt,name=target_path,json=targetPath,proto3" json:"target_path,omitempty"`
}

func (x *ExecLogEntry_UnresolvedSymlink) Reset() {
	*x = ExecLogEntry_UnresolvedSymlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_UnresolvedSymlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_UnresolvedSymlink) ProtoMessage() {}

func (x *ExecLogEntry_UnresolvedSymlink) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_UnresolvedSymlink.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_UnresolvedSymlink) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 3}
}

func (x *ExecLogEntry_UnresolvedSymlink) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ExecLogEntry_UnresolvedSymlink) GetTargetPath() string {
	if x != nil {
		return x.TargetPath
	}
	return ""
}

// A set of spawn inputs.
// The contents of the set are the directly referenced files, directories and
// symlinks in addition to the contents of all transitively referenced sets.
// Sets are not canonical: two sets with different structure may yield the
// same contents.
type ExecLogEntry_InputSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entry IDs of files belonging to this set.
	FileIds []int32 `protobuf:"varint,1,rep,packed,name=file_ids,json=fileIds,proto3" json:"file_ids,omitempty"`
	// Entry IDs of directories belonging to this set.
	DirectoryIds []int32 `protobuf:"varint,2,rep,packed,name=directory_ids,json=directoryIds,proto3" json:"directory_ids,omitempty"`
	// Entry IDs of unresolved symlinks belonging to this set.
	UnresolvedSymlinkIds []int32 `protobuf:"varint,3,rep,packed,name=unresolved_symlink_ids,json=unresolvedSymlinkIds,proto3" json:"unresolved_symlink_ids,omitempty"`
	// Entry IDs of other sets contained in this set.
	TransitiveSetIds []int32 `protobuf:"varint,4,rep,packed,name=transitive_set_ids,json=transitiveSetIds,proto3" json:"transitive_set_ids,omitempty"`
}

func (x *ExecLogEntry_InputSet) Reset() {
	*x = ExecLogEntry_InputSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_InputSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_InputSet) ProtoMessage() {}

func (x *ExecLogEntry_InputSet) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_InputSet.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_InputSet) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 4}
}

func (x *ExecLogEntry_InputSet) GetFileIds() []int32 {
	if x != nil {
		return x.FileIds
	}
	return nil
}

func (x *ExecLogEntry_InputSet) GetDirectoryIds() []int32 {
	if x != nil {
		return x.DirectoryIds
	}
	return nil
}

func (x *ExecLogEntry_InputSet) GetUnresolvedSymlinkIds() []int32 {
	if x != nil {
		return x.UnresolvedSymlinkIds
	}
	return nil
}

func (x *ExecLogEntry_InputSet) GetTransitiveSetIds() []int32 {
	if x != nil {
		return x.TransitiveSetIds
	}
	return nil
}

// A spawn output.
type ExecLogEntry_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*ExecLogEntry_Output_FileId
	//	*ExecLogEntry_Output_DirectoryId
	//	*ExecLogEntry_Output_UnresolvedSymlinkId
	//	*ExecLogEntry_Output_InvalidOutputPath
	Type isExecLogEntry_Output_Type `protobuf_oneof:"type"`
}

func (x *ExecLogEntry_Output) Reset() {
	*x = ExecLogEntry_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Output) ProtoMessage() {}

func (x *ExecLogEntry_Output) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Output.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Output) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 5}
}

func (m *ExecLogEntry_Output) GetType() isExecLogEntry_Output_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ExecLogEntry_Output) GetFileId() int32 {
	if x, ok := x.GetType().(*ExecLogEntry_Output_FileId); ok {
		return x.FileId
	}
	return 0
}

func (x *ExecLogEntry_Output) GetDirectoryId() int32 {
	if x, ok := x.GetType().(*ExecLogEntry_Output_DirectoryId); ok {
		return x.DirectoryId
	}
	return 0
}

func (x *ExecLogEntry_Output) GetUnresolvedSymlinkId() int32 {
	if x, ok := x.GetType().(*ExecLogEntry_Output_UnresolvedSymlinkId); ok {
		return x.UnresolvedSymlinkId
	}
	return 0
}

func (x *ExecLogEntry_Output) GetInvalidOutputPath() string {
	if x, ok := x.GetType().(*ExecLogEntry_Output_InvalidOutputPath); ok {
		return x.InvalidOutputPath
	}
	return ""
}

type isExecLogEntry_Output_Type interface {
	isExecLogEntry_Output_Type()
}

type ExecLogEntry_Output_FileId struct {
	// An output file, i.e., ctx.actions.declare_file.
	FileId int32 `protobuf:"varint,1,opt,name=file_id,json=fileId,proto3,oneof"`
}

type ExecLogEntry_Output_DirectoryId struct {
	// An output directory, i.e., ctx.actions.declare_directory.
	DirectoryId int32 `protobuf:"varint,2,opt,name=directory_id,json=directoryId,proto3,oneof"`
}

type ExecLogEntry_Output_UnresolvedSymlinkId struct {
	// An output unresolved symlink, i.e., ctx.actions.declare_symlink.
	UnresolvedSymlinkId int32 `protobuf:"varint,3,opt,name=unresolved_symlink_id,json=unresolvedSymlinkId,proto3,oneof"`
}

type ExecLogEntry_Output_InvalidOutputPath struct {
	// A declared output that is either missing or has the wrong type
	// (e.g., a file where a directory was expected).
	InvalidOutputPath string `protobuf:"bytes,4,opt,name=invalid_output_path,json=invalidOutputPath,proto3,oneof"`
}

func (*ExecLogEntry_Output_FileId) isExecLogEntry_Output_Type() {}

func (*ExecLogEntry_Output_DirectoryId) isExecLogEntry_Output_Type() {}

func (*ExecLogEntry_Output_UnresolvedSymlinkId) isExecLogEntry_Output_Type() {}

func (*ExecLogEntry_Output_InvalidOutputPath) isExecLogEntry_Output_Type() {}

// An executed spawn.
type ExecLogEntry_Spawn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The command line arguments.
	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// The environment variables.
	EnvVars []*EnvironmentVariable `protobuf:"bytes,2,rep,name=env_vars,json=envVars,proto3" json:"env_vars,omitempty"`
	// The execution platform.
	Platform *Platform `protobuf:"bytes,3,opt,name=platform,proto3" json:"platform,omitempty"`
	// Entry ID of the set of inputs. Unset means empty.
	InputSetId int32 `protobuf:"varint,4,opt,name=input_set_id,json=inputSetId,proto3" json:"input_set_id,omitempty"`
	// Entry ID of the set of tool inputs. Unset means empty.
	ToolSetId int32 `protobuf:"varint,5,opt,name=tool_set_id,json=toolSetId,proto3" json:"tool_set_id,omitempty"`
	// The set of outputs.
	Outputs []*ExecLogEntry_Output `protobuf:"bytes,6,rep,name=outputs,proto3" json:"outputs,omitempty"`
	// See SpawnExec.label.
	TargetLabel string `protobuf:"bytes,7,opt,name=target_label,json=targetLabel,proto3" json:"target_label,omitempty"`
	// See SpawnExec.mnemonic.
	Mnemonic string `protobuf:"bytes,8,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// See SpawnExec.exit_code.
	ExitCode int32 `protobuf:"varint,9,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// See SpawnExec.status.
	Status string `protobuf:"bytes,10,opt,name=status,proto3" json:"status,omitempty"`
	// See SpawnExec.runner.
	Runner string `protobuf:"bytes,11,opt,name=runner,proto3" json:"runner,omitempty"`
	// See SpawnExec.cache_hit.
	CacheHit bool `protobuf:"varint,12,opt,name=cache_hit,json=cacheHit,proto3" json:"cache_hit,omitempty"`
	// See SpawnExec.remotable.
	Remotable bool `protobuf:"varint,13,opt,name=remotable,proto3" json:"remotable,omitempty"`
	// See SpawnExec.cacheable.
	Cacheable bool `protobuf:"varint,14,opt,name=cacheable,proto3" json:"cacheable,omitempty"`
	// See SpawnExec.remote_cacheable.
	RemoteCacheable bool `protobuf:"varint,15,opt,name=remote_cacheable,json=remoteCacheable,proto3" json:"remote_cacheable,omitempty"`
	// See SpawnExec.digest.
	// The hash function name is omitted. It can be obtained from Invocation.
	// Unset if the file is empty.
	Digest *Digest `protobuf:"bytes,16,opt,name=digest,proto3" json:"digest,omitempty"`
	// See SpawnExec.timeout_millis.
	TimeoutMillis int64 `protobuf:"varint,17,opt,name=timeout_millis,json=timeoutMillis,proto3" json:"timeout_millis,omitempty"`
	// See SpawnExec.metrics.
	Metrics *SpawnMetrics `protobuf:"bytes,18,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (x *ExecLogEntry_Spawn) Reset() {
	*x = ExecLogEntry_Spawn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_spawn_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecLogEntry_Spawn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecLogEntry_Spawn) ProtoMessage() {}

func (x *ExecLogEntry_Spawn) ProtoReflect() protoreflect.Message {
	mi := &file_spawn_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecLogEntry_Spawn.ProtoReflect.Descriptor instead.
func (*ExecLogEntry_Spawn) Descriptor() ([]byte, []int) {
	return file_spawn_proto_rawDescGZIP(), []int{6, 6}
}

func (x *ExecLogEntry_Spawn) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetEnvVars() []*EnvironmentVariable {
	if x != nil {
		return x.EnvVars
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetPlatform() *Platform {
	if x != nil {
		return x.Platform
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetInputSetId() int32 {
	if x != nil {
		return x.InputSetId
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetToolSetId() int32 {
	if x != nil {
		return x.ToolSetId
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetOutputs() []*ExecLogEntry_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetTargetLabel() string {
	if x != nil {
		return x.TargetLabel
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetRunner() string {
	if x != nil {
		return x.Runner
	}
	return ""
}

func (x *ExecLogEntry_Spawn) GetCacheHit() bool {
	if x != nil {
		return x.CacheHit
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetRemotable() bool {
	if x != nil {
		return x.Remotable
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetCacheable() bool {
	if x != nil {
		return x.Cacheable
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetRemoteCacheable() bool {
	if x != nil {
		return x.RemoteCacheable
	}
	return false
}

func (x *ExecLogEntry_Spawn) GetDigest() *Digest {
	if x != nil {
		return x.Digest
	}
	return nil
}

func (x *ExecLogEntry_Spawn) GetTimeoutMillis() int64 {
	if x != nil {
		return x.TimeoutMillis
	}
	return 0
}

func (x *ExecLogEntry_Spawn) GetMetrics() *SpawnMetrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

var File_spawn_proto protoreflect.FileDescriptor

var file_spawn_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x69, 0x0a, 0x06,
	0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69,
	0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x73, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61, 0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x91, 0x01, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x6f, 0x6f, 0x6c, 0x22, 0x3f, 0x0a, 0x13, 0x45,
	0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x81, 0x01, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x3f, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x1a, 0x34, 0x0a, 0x08, 0x50, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xc9, 0x08, 0x0a, 0x0c, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3c, 0x0a, 0x0c, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x09, 0x66, 0x65, 0x74, 0x63, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a,
	0x0a, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x73, 0x65, 0x74, 0x75, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a,
	0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x77, 0x61, 0x6c, 0x6c, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x57, 0x61, 0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x65, 0x73, 0x74, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x13, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a,
	0x12, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x65, 0x6d,
	0x6f, 0x72, 0x79, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x05, 0x0a,
	0x09, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x72, 0x67, 0x73, 0x12, 0x56, 0x0a,
	0x15, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74,
	0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69,
	0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x14, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2a, 0x0a, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x69, 0x73, 0x74, 0x65, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63,
	0x61, 0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x0e, 0x61,
	0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0d, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x2c,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x70, 0x61,
	0x77, 0x6e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x4a, 0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x22, 0x87,
	0x0e, 0x0a, 0x0c, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x47, 0x0a, 0x0a, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x35, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x44, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x5d, 0x0a, 0x12, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73,
	0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x55, 0x6e,
	0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x48,
	0x00, 0x52, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x42, 0x0a, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x08,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x12, 0x38, 0x0a, 0x05, 0x73, 0x70, 0x61, 0x77,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x48, 0x00, 0x52, 0x05, 0x73, 0x70, 0x61,
	0x77, 0x6e, 0x1a, 0x3a, 0x0a, 0x0a, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x12, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x68, 0x61,
	0x73, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x48,
	0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x6f,
	0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x56, 0x0a, 0x09, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x35, 0x0a, 0x05, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73,
	0x1a, 0x48, 0x0a, 0x11, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x53, 0x79,
	0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x1a, 0xae, 0x01, 0x0a, 0x08, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x75, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x14, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x73, 0x12, 0x2c, 0x0a,
	0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x10, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x53, 0x65, 0x74, 0x49, 0x64, 0x73, 0x1a, 0xb8, 0x01, 0x0a, 0x06,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x65, 0x49,
	0x64, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x13, 0x75, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x13,
	0x69, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x69, 0x6e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x74, 0x68, 0x42, 0x06,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xa7, 0x05, 0x0a, 0x05, 0x53, 0x70, 0x61, 0x77, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x07, 0x65, 0x6e, 0x76, 0x56, 0x61,
	0x72, 0x73, 0x12, 0x32, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0b, 0x74, 0x6f, 0x6f, 0x6c,
	0x5f, 0x73, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x6f, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x07, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x75, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x75, 0x6e, 0x6e, 0x65,
	0x72, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x61, 0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x63, 0x61, 0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x34, 0x0a, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x6f,
	0x6f, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x53, 0x70, 0x61, 0x77, 0x6e,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x42, 0x5a, 0x40, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61,
	0x70, 0x68, 0x2f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2f, 0x64,
	0x65, 0x76, 0x2f, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x2d, 0x65, 0x78, 0x65, 0x63, 0x6c, 0x6f, 0x67,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_spawn_proto_rawDescOnce sync.Once
	file_spawn_proto_rawDescData = file_spawn_proto_rawDesc
)

func file_spawn_proto_rawDescGZIP() []byte {
	file_spawn_proto_rawDescOnce.Do(func() {
		file_spawn_proto_rawDescData = protoimpl.X.CompressGZIP(file_spawn_proto_rawDescData)
	})
	return file_spawn_proto_rawDescData
}

var file_spawn_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_spawn_proto_goTypes = []interface{}{
	(*Digest)(nil),                         // 0: tools.protos.Digest
	(*File)(nil),                           // 1: tools.protos.File
	(*EnvironmentVariable)(nil),            // 2: tools.protos.EnvironmentVariable
	(*Platform)(nil),                       // 3: tools.protos.Platform
	(*SpawnMetrics)(nil),                   // 4: tools.protos.SpawnMetrics
	(*SpawnExec)(nil),                      // 5: tools.protos.SpawnExec
	(*ExecLogEntry)(nil),                   // 6: tools.protos.ExecLogEntry
	(*Platform_Property)(nil),              // 7: tools.protos.Platform.Property
	(*ExecLogEntry_Invocation)(nil),        // 8: tools.protos.ExecLogEntry.Invocation
	(*ExecLogEntry_File)(nil),              // 9: tools.protos.ExecLogEntry.File
	(*ExecLogEntry_Directory)(nil),         // 10: tools.protos.ExecLogEntry.Directory
	(*ExecLogEntry_UnresolvedSymlink)(nil), // 11: tools.protos.ExecLogEntry.UnresolvedSymlink
	(*ExecLogEntry_InputSet)(nil),          // 12: tools.protos.ExecLogEntry.InputSet
	(*ExecLogEntry_Output)(nil),            // 13: tools.protos.ExecLogEntry.Output
	(*ExecLogEntry_Spawn)(nil),             // 14: tools.protos.ExecLogEntry.Spawn
	(*durationpb.Duration)(nil),            // 15: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),          // 16: google.protobuf.Timestamp
}
var file_spawn_proto_depIdxs = []int32{
	0,  // 0: tools.protos.File.digest:type_name -> tools.protos.Digest
	7,  // 1: tools.protos.Platform.properties:type_name -> tools.protos.Platform.Property
	15, // 2: tools.protos.SpawnMetrics.total_time:type_name -> google.protobuf.Duration
	15, // 3: tools.protos.SpawnMetrics.parse_time:type_name -> google.protobuf.Duration
	15, // 4: tools.protos.SpawnMetrics.network_time:type_name -> google.protobuf.Duration
	15, // 5: tools.protos.SpawnMetrics.fetch_time:type_name -> google.protobuf.Duration
	15, // 6: tools.protos.SpawnMetrics.queue_time:type_name -> google.protobuf.Duration
	15, // 7: tools.protos.SpawnMetrics.setup_time:type_name -> google.protobuf.Duration
	15, // 8: tools.protos.SpawnMetrics.upload_time:type_name -> google.protobuf.Duration
	15, // 9: tools.protos.SpawnMetrics.execution_wall_time:type_name -> google.protobuf.Duration
	15, // 10: tools.protos.SpawnMetrics.process_outputs_time:type_name -> google.protobuf.Duration
	15, // 11: tools.protos.SpawnMetrics.retry_time:type_name -> google.protobuf.Duration
	15, // 12: tools.protos.SpawnMetrics.time_limit:type_name -> google.protobuf.Duration
	16, // 13: tools.protos.SpawnMetrics.start_time:type_name -> google.protobuf.Timestamp
	2,  // 14: tools.protos.SpawnExec.environment_variables:type_name -> tools.protos.EnvironmentVariable
	3,  // 15: tools.protos.SpawnExec.platform:type_name -> tools.protos.Platform
	1,  // 16: tools.protos.SpawnExec.inputs:type_name -> tools.protos.File
	1,  // 17: tools.protos.SpawnExec.actual_outputs:type_name -> tools.protos.File
	0,  // 18: tools.protos.SpawnExec.digest:type_name -> tools.protos.Digest
	4,  // 19: tools.protos.SpawnExec.metrics:type_name -> tools.protos.SpawnMetrics
	8,  // 20: tools.protos.ExecLogEntry.invocation:type_name -> tools.protos.ExecLogEntry.Invocation
	9,  // 21: tools.protos.ExecLogEntry.file:type_name -> tools.protos.ExecLogEntry.File
	10, // 22: tools.protos.ExecLogEntry.directory:type_name -> tools.protos.ExecLogEntry.Directory
	11, // 23: tools.protos.ExecLogEntry.unresolved_symlink:type_name -> tools.protos.ExecLogEntry.UnresolvedSymlink
	12, // 24: tools.protos.ExecLogEntry.input_set:type_name -> tools.protos.ExecLogEntry.InputSet
	14, // 25: tools.protos.ExecLogEntry.spawn:type_name -> tools.protos.ExecLogEntry.Spawn
	0,  // 26: tools.protos.ExecLogEntry.File.digest:type_name -> tools.protos.Digest
	9,  // 27: tools.protos.ExecLogEntry.Directory.files:type_name -> tools.protos.ExecLogEntry.File
	2,  // 28: tools.protos.ExecLogEntry.Spawn.env_vars:type_name -> tools.protos.EnvironmentVariable
	3,  // 29: tools.protos.ExecLogEntry.Spawn.platform:type_name -> tools.protos.Platform
	13, // 30: tools.protos.ExecLogEntry.Spawn.outputs:type_name -> tools.protos.ExecLogEntry.Output
	0,  // 31: tools.protos.ExecLogEntry.Spawn.digest:type_name -> tools.protos.Digest
	4,  // 32: tools.protos.ExecLogEntry.Spawn.metrics:type_name -> tools.protos.SpawnMetrics
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_spawn_proto_init() }
func file_spawn_proto_init() {
	if File_spawn_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_spawn_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Digest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvironmentVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpawnMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpawnExec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Platform_Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_Invocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_Directory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_UnresolvedSymlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_InputSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_spawn_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecLogEntry_Spawn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_spawn_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*ExecLogEntry_Invocation_)(nil),
		(*ExecLogEntry_File_)(nil),
		(*ExecLogEntry_Directory_)(nil),
		(*ExecLogEntry_UnresolvedSymlink_)(nil),
		(*ExecLogEntry_InputSet_)(nil),
		(*ExecLogEntry_Spawn_)(nil),
	}
	file_spawn_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*ExecLogEntry_Output_FileId)(nil),
		(*ExecLogEntry_Output_DirectoryId)(nil),
		(*ExecLogEntry_Output_UnresolvedSymlinkId)(nil),
		(*ExecLogEntry_Output_InvalidOutputPath)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_spawn_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_spawn_proto_goTypes,
		DependencyIndexes: file_spawn_proto_depIdxs,
		MessageInfos:      file_spawn_proto_msgTypes,
	}.Build()
	File_spawn_proto = out.File
	file_spawn_proto_rawDesc = nil
	file_spawn_proto_goTypes = nil
	file_spawn_proto_depIdxs = nil
}
