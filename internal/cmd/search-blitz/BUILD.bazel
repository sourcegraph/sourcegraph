load("//dev:go_defs.bzl", "go_test")
load("@io_bazel_rules_go//go:def.bzl", "go_binary", "go_library")
load("//dev:oci_defs.bzl", "image_repository", "oci_image", "oci_push", "oci_tarball", "pkg_tar")
load("@container_structure_test//:defs.bzl", "container_structure_test")

go_library(
    name = "search-blitz_lib",
    srcs = [
        "api.go",
        "client.go",
        "config.go",
        "main.go",
        "prometheus.go",
        "protocol.go",
        "query.go",
        "stream_client.go",
    ],
    embedsrcs = [
        "attribution.graphql",
        "attribution/many_lines.txt",
        "attribution/one_line.txt",
        "queries.txt",
        "queries_dogfood.txt",
        "search.graphql",
    ],
    importpath = "github.com/sourcegraph/sourcegraph/internal/cmd/search-blitz",
    tags = [TAG_PLATFORM_SEARCH],
    visibility = ["//visibility:private"],
    deps = [
        "//internal/search/streaming/api",
        "//internal/search/streaming/http",
        "//lib/errors",
        "@com_github_inconshreveable_log15//:log15",
        "@com_github_prometheus_client_golang//prometheus",
        "@com_github_prometheus_client_golang//prometheus/promauto",
        "@com_github_prometheus_client_golang//prometheus/promhttp",
        "@in_gopkg_natefinch_lumberjack_v2//:lumberjack_v2",
    ],
)

go_binary(
    name = "search-blitz",
    embed = [":search-blitz_lib"],
    tags = [TAG_PLATFORM_SEARCH],
    visibility = ["//:__subpackages__"],
)

go_test(
    name = "search-blitz_test",
    timeout = "short",
    srcs = ["config_test.go"],
    embed = [":search-blitz_lib"],
    tags = [TAG_PLATFORM_SEARCH],
)

pkg_tar(
    name = "tar_search_blitz",
    srcs = [":search-blitz"],
)

oci_image(
    name = "image",
    base = "//wolfi-images/sourcegraph-base:base_image",
    entrypoint = [
        "/sbin/tini",
        "--",
        "/search-blitz",
    ],
    tars = [":tar_search_blitz"],
    user = "sourcegraph",
)

oci_tarball(
    name = "image_tarball",
    image = ":image",
    repo_tags = ["search-blitz:candidate"],
)

container_structure_test(
    name = "image_test",
    timeout = "short",
    configs = ["image_test.yaml"],
    driver = "docker",
    image = ":image",
    tags = [
        "exclusive",
        "requires-network",
        TAG_PLATFORM_SEARCH,
    ],
)

oci_push(
    name = "candidate_push",
    image = ":image",
    repository = image_repository("search-blitz"),
)
