// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file subscriptions.proto (package enterpriseportal.subscriptions.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * EnterpriseSubscriptionLicenseType can be used to denote different types of
 * licenses.
 *
 * @generated from enum enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType
 */
export enum EnterpriseSubscriptionLicenseType {
  /**
   * @generated from enum value: ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * The 'license key' type is the classic licensing mechanism that Sourcegraph
   * has always had. They are signed by a private key and offline-validated by
   * a public key that ships with all Sourcegraph builds.
   *
   * Each Subscription is expected to have at most one active Sourcegraph classic
   * license used by a Sourcegraph instance at a time.
   *
   * @generated from enum value: ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY = 1;
   */
  KEY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(EnterpriseSubscriptionLicenseType)
proto3.util.setEnumType(EnterpriseSubscriptionLicenseType, "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType", [
  { no: 0, name: "ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_UNSPECIFIED" },
  { no: 1, name: "ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY" },
]);

/**
 * Role represents a role that can be granted to a user.
 *
 * @generated from enum enterpriseportal.subscriptions.v1.Role
 */
export enum Role {
  /**
   * @generated from enum value: ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ROLE_SUBSCRIPTION_CUSTOMER_ADMIN = 2;
   */
  SUBSCRIPTION_CUSTOMER_ADMIN = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(Role)
proto3.util.setEnumType(Role, "enterpriseportal.subscriptions.v1.Role", [
  { no: 0, name: "ROLE_UNSPECIFIED" },
  { no: 2, name: "ROLE_SUBSCRIPTION_CUSTOMER_ADMIN" },
]);

/**
 * PermissionType defines a class of objects with similar characteristics.
 * https://openfga.dev/docs/concepts#what-is-a-type
 *
 * @generated from enum enterpriseportal.subscriptions.v1.PermissionType
 */
export enum PermissionType {
  /**
   * @generated from enum value: PERMISSION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERMISSION_TYPE_SUBSCRIPTION_CODY_ANALYTICS = 1;
   */
  SUBSCRIPTION_CODY_ANALYTICS = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionType)
proto3.util.setEnumType(PermissionType, "enterpriseportal.subscriptions.v1.PermissionType", [
  { no: 0, name: "PERMISSION_TYPE_UNSPECIFIED" },
  { no: 1, name: "PERMISSION_TYPE_SUBSCRIPTION_CODY_ANALYTICS" },
]);

/**
 * PermissionRelation represents the relation between the user and the resource.
 *
 * @generated from enum enterpriseportal.subscriptions.v1.PermissionRelation
 */
export enum PermissionRelation {
  /**
   * @generated from enum value: PERMISSION_RELATION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PERMISSION_RELATION_VIEW = 1;
   */
  VIEW = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PermissionRelation)
proto3.util.setEnumType(PermissionRelation, "enterpriseportal.subscriptions.v1.PermissionRelation", [
  { no: 0, name: "PERMISSION_RELATION_UNSPECIFIED" },
  { no: 1, name: "PERMISSION_RELATION_VIEW" },
]);

/**
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition
 */
export class EnterpriseSubscriptionCondition extends Message<EnterpriseSubscriptionCondition> {
  /**
   * The time this subscription transitioned into this status.
   *
   * @generated from field: google.protobuf.Timestamp last_transition_time = 1;
   */
  lastTransitionTime?: Timestamp;

  /**
   * Status is the type of status corresponding to this condition.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.Status status = 2;
   */
  status = EnterpriseSubscriptionCondition_Status.UNSPECIFIED;

  /**
   * Message is a description of the status transition and why it happened.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<EnterpriseSubscriptionCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_transition_time", kind: "message", T: Timestamp },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(EnterpriseSubscriptionCondition_Status) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionCondition {
    return new EnterpriseSubscriptionCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionCondition {
    return new EnterpriseSubscriptionCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionCondition {
    return new EnterpriseSubscriptionCondition().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionCondition | PlainMessage<EnterpriseSubscriptionCondition> | undefined, b: EnterpriseSubscriptionCondition | PlainMessage<EnterpriseSubscriptionCondition> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionCondition, a, b);
  }
}

/**
 * @generated from enum enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.Status
 */
export enum EnterpriseSubscriptionCondition_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Subscription creation status.
   *
   * @generated from enum value: STATUS_CREATED = 1;
   */
  CREATED = 1,

  /**
   * Subscription archival status. i.e. 'is_archived'
   *
   * @generated from enum value: STATUS_ARCHIVED = 2;
   */
  ARCHIVED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EnterpriseSubscriptionCondition_Status)
proto3.util.setEnumType(EnterpriseSubscriptionCondition_Status, "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_CREATED" },
  { no: 2, name: "STATUS_ARCHIVED" },
]);

/**
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionSalesforceMetadata
 */
export class EnterpriseSubscriptionSalesforceMetadata extends Message<EnterpriseSubscriptionSalesforceMetadata> {
  /**
   * The Salesforce subscription ID associated with this Enterprise subscription.
   *
   * @generated from field: string subscription_id = 1;
   */
  subscriptionId = "";

  constructor(data?: PartialMessage<EnterpriseSubscriptionSalesforceMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionSalesforceMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionSalesforceMetadata {
    return new EnterpriseSubscriptionSalesforceMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionSalesforceMetadata {
    return new EnterpriseSubscriptionSalesforceMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionSalesforceMetadata {
    return new EnterpriseSubscriptionSalesforceMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionSalesforceMetadata | PlainMessage<EnterpriseSubscriptionSalesforceMetadata> | undefined, b: EnterpriseSubscriptionSalesforceMetadata | PlainMessage<EnterpriseSubscriptionSalesforceMetadata> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionSalesforceMetadata, a, b);
  }
}

/**
 * EnterpriseSubscription represents a Sourcegraph Enterprise subscription.
 *
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscription
 */
export class EnterpriseSubscription extends Message<EnterpriseSubscription> {
  /**
   * ID is the external, prefixed UUID-format identifier for this subscription
   * (e.g. "es_...").
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Timeline of key events corresponding to this subscription.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.EnterpriseSubscriptionCondition conditions = 2;
   */
  conditions: EnterpriseSubscriptionCondition[] = [];

  /**
   * Display name of this subscription, e.g. "Acme, Inc."
   *
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * The instance domain associated with this subscription, e.g. "acme.sourcegraphcloud.com".
   *
   * @generated from field: string instance_domain = 4;
   */
  instanceDomain = "";

  /**
   * Salesforce details associated with this subscription.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionSalesforceMetadata salesforce = 5;
   */
  salesforce?: EnterpriseSubscriptionSalesforceMetadata;

  constructor(data?: PartialMessage<EnterpriseSubscription>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscription";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "conditions", kind: "message", T: EnterpriseSubscriptionCondition, repeated: true },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "instance_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "salesforce", kind: "message", T: EnterpriseSubscriptionSalesforceMetadata },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscription {
    return new EnterpriseSubscription().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscription {
    return new EnterpriseSubscription().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscription {
    return new EnterpriseSubscription().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscription | PlainMessage<EnterpriseSubscription> | undefined, b: EnterpriseSubscription | PlainMessage<EnterpriseSubscription> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscription, a, b);
  }
}

/**
 * EnterpriseSubscriptionLicenseKey is the classic offline Sourcegraph license
 * key, and corresponds to ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY.
 *
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey
 */
export class EnterpriseSubscriptionLicenseKey extends Message<EnterpriseSubscriptionLicenseKey> {
  /**
   * Version of this classic license's information schema. It is incremented
   * whenever a major change is made to the shape of Info to indicate what
   * fields can be expected from the information embedded in the license key.
   *
   * @generated from field: uint32 info_version = 1;
   */
  infoVersion = 0;

  /**
   * Read-only information embedded into ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.Info info = 2;
   */
  info?: EnterpriseSubscriptionLicenseKey_Info;

  /**
   * The signed license key.
   *
   * @generated from field: string license_key = 3;
   */
  licenseKey = "";

  constructor(data?: PartialMessage<EnterpriseSubscriptionLicenseKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info_version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "info", kind: "message", T: EnterpriseSubscriptionLicenseKey_Info },
    { no: 3, name: "license_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionLicenseKey {
    return new EnterpriseSubscriptionLicenseKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicenseKey {
    return new EnterpriseSubscriptionLicenseKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicenseKey {
    return new EnterpriseSubscriptionLicenseKey().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionLicenseKey | PlainMessage<EnterpriseSubscriptionLicenseKey> | undefined, b: EnterpriseSubscriptionLicenseKey | PlainMessage<EnterpriseSubscriptionLicenseKey> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionLicenseKey, a, b);
  }
}

/**
 * Read-only information embedded into ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY.
 *
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.Info
 */
export class EnterpriseSubscriptionLicenseKey_Info extends Message<EnterpriseSubscriptionLicenseKey_Info> {
  /**
   * The tags that indicate which features are activated by this license.
   *
   * @generated from field: repeated string tags = 1;
   */
  tags: string[] = [];

  /**
   * The number of users for which this product subscription is valid.
   *
   * @generated from field: uint64 user_count = 2;
   */
  userCount = protoInt64.zero;

  /**
   * The expiration date of this product license. In license data, this is
   * called 'expires_at', expressed as the number of seconds since the epoch.
   *
   * @generated from field: google.protobuf.Timestamp expire_time = 3;
   */
  expireTime?: Timestamp;

  /**
   * The Salesforce subscription ID associated with this license's parent
   * Enterprise Subscription.
   *
   * @generated from field: string salesforce_subscription_id = 4;
   */
  salesforceSubscriptionId = "";

  /**
   * The Salesforce opportunity ID associated with this product license's
   * creation. Opportunities in Salesforce generally lead to the creation of a
   * new license key.
   *
   * @generated from field: string salesforce_opportunity_id = 5;
   */
  salesforceOpportunityId = "";

  constructor(data?: PartialMessage<EnterpriseSubscriptionLicenseKey_Info>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey.Info";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tags", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "user_count", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "expire_time", kind: "message", T: Timestamp },
    { no: 4, name: "salesforce_subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "salesforce_opportunity_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionLicenseKey_Info {
    return new EnterpriseSubscriptionLicenseKey_Info().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicenseKey_Info {
    return new EnterpriseSubscriptionLicenseKey_Info().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicenseKey_Info {
    return new EnterpriseSubscriptionLicenseKey_Info().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionLicenseKey_Info | PlainMessage<EnterpriseSubscriptionLicenseKey_Info> | undefined, b: EnterpriseSubscriptionLicenseKey_Info | PlainMessage<EnterpriseSubscriptionLicenseKey_Info> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionLicenseKey_Info, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition
 */
export class EnterpriseSubscriptionLicenseCondition extends Message<EnterpriseSubscriptionLicenseCondition> {
  /**
   * The time this subscription transitioned into this status.
   *
   * @generated from field: google.protobuf.Timestamp last_transition_time = 1;
   */
  lastTransitionTime?: Timestamp;

  /**
   * Status is the type of status corresponding to this condition.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.Status status = 2;
   */
  status = EnterpriseSubscriptionLicenseCondition_Status.UNSPECIFIED;

  /**
   * Message is a description of the status transition and why it happened.
   *
   * @generated from field: string message = 3;
   */
  message = "";

  constructor(data?: PartialMessage<EnterpriseSubscriptionLicenseCondition>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "last_transition_time", kind: "message", T: Timestamp },
    { no: 2, name: "status", kind: "enum", T: proto3.getEnumType(EnterpriseSubscriptionLicenseCondition_Status) },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionLicenseCondition {
    return new EnterpriseSubscriptionLicenseCondition().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicenseCondition {
    return new EnterpriseSubscriptionLicenseCondition().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicenseCondition {
    return new EnterpriseSubscriptionLicenseCondition().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionLicenseCondition | PlainMessage<EnterpriseSubscriptionLicenseCondition> | undefined, b: EnterpriseSubscriptionLicenseCondition | PlainMessage<EnterpriseSubscriptionLicenseCondition> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionLicenseCondition, a, b);
  }
}

/**
 * @generated from enum enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.Status
 */
export enum EnterpriseSubscriptionLicenseCondition_Status {
  /**
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * License creation status.
   *
   * @generated from enum value: STATUS_CREATED = 1;
   */
  CREATED = 1,

  /**
   * License revocation status, i.e. 'is_revoked'
   *
   * @generated from enum value: STATUS_REVOKED = 2;
   */
  REVOKED = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(EnterpriseSubscriptionLicenseCondition_Status)
proto3.util.setEnumType(EnterpriseSubscriptionLicenseCondition_Status, "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition.Status", [
  { no: 0, name: "STATUS_UNSPECIFIED" },
  { no: 1, name: "STATUS_CREATED" },
  { no: 2, name: "STATUS_REVOKED" },
]);

/**
 * EnterpriseSubscriptionLicense represents a license for a Sourcegraph
 * Enterprise product. Multiple licenses are associated with a single
 * subscription, typically a series of licenses with the most recent one being
 * a subscription's active license.
 *
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense
 */
export class EnterpriseSubscriptionLicense extends Message<EnterpriseSubscriptionLicense> {
  /**
   * ID is the external, prefixed UUID-format identifier for this license key.
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * The external, prefixed UUID-format identifier for the subscription that
   * owns this license.
   *
   * @generated from field: string subscription_id = 2;
   */
  subscriptionId = "";

  /**
   * Timeline of key events corresponding to this license.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseCondition conditions = 3;
   */
  conditions: EnterpriseSubscriptionLicenseCondition[] = [];

  /**
   * License data, based on the type of the license.
   *
   * @generated from oneof enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense.license
   */
  license: {
    /**
     * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseKey key = 4;
     */
    value: EnterpriseSubscriptionLicenseKey;
    case: "key";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<EnterpriseSubscriptionLicense>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "conditions", kind: "message", T: EnterpriseSubscriptionLicenseCondition, repeated: true },
    { no: 4, name: "key", kind: "message", T: EnterpriseSubscriptionLicenseKey, oneof: "license" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionLicense {
    return new EnterpriseSubscriptionLicense().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicense {
    return new EnterpriseSubscriptionLicense().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionLicense {
    return new EnterpriseSubscriptionLicense().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionLicense | PlainMessage<EnterpriseSubscriptionLicense> | undefined, b: EnterpriseSubscriptionLicense | PlainMessage<EnterpriseSubscriptionLicense> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionLicense, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest
 */
export class GetEnterpriseSubscriptionRequest extends Message<GetEnterpriseSubscriptionRequest> {
  /**
   * Query specifies the lookup strategy for this get request.
   *
   * @generated from oneof enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest.query
   */
  query: {
    /**
     * Look up a subscription using its external, prefixed UUID-format identifier.
     *
     * @generated from field: string id = 1;
     */
    value: string;
    case: "id";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GetEnterpriseSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "query" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEnterpriseSubscriptionRequest {
    return new GetEnterpriseSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEnterpriseSubscriptionRequest {
    return new GetEnterpriseSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEnterpriseSubscriptionRequest {
    return new GetEnterpriseSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetEnterpriseSubscriptionRequest | PlainMessage<GetEnterpriseSubscriptionRequest> | undefined, b: GetEnterpriseSubscriptionRequest | PlainMessage<GetEnterpriseSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(GetEnterpriseSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionResponse
 */
export class GetEnterpriseSubscriptionResponse extends Message<GetEnterpriseSubscriptionResponse> {
  /**
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscription subscription = 1;
   */
  subscription?: EnterpriseSubscription;

  constructor(data?: PartialMessage<GetEnterpriseSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.GetEnterpriseSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: EnterpriseSubscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetEnterpriseSubscriptionResponse {
    return new GetEnterpriseSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetEnterpriseSubscriptionResponse {
    return new GetEnterpriseSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetEnterpriseSubscriptionResponse {
    return new GetEnterpriseSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetEnterpriseSubscriptionResponse | PlainMessage<GetEnterpriseSubscriptionResponse> | undefined, b: GetEnterpriseSubscriptionResponse | PlainMessage<GetEnterpriseSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(GetEnterpriseSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter
 */
export class ListEnterpriseSubscriptionsFilter extends Message<ListEnterpriseSubscriptionsFilter> {
  /**
   * @generated from oneof enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter.filter
   */
  filter: {
    /**
     * Filter by exact match on the Enterprise Subscription ID.
     *
     * @generated from field: string subscription_id = 1;
     */
    value: string;
    case: "subscriptionId";
  } | {
    /**
     * Return only product subscriptions with the given archival status.
     *
     * @generated from field: bool is_archived = 2;
     */
    value: boolean;
    case: "isArchived";
  } | {
    /**
     * Return only product subscriptions that satisfies the given permission.
     *
     * @generated from field: enterpriseportal.subscriptions.v1.Permission permission = 3;
     */
    value: Permission;
    case: "permission";
  } | {
    /**
     * Filter by partial match on display name. The query must be at least 3
     * characters long.
     *
     * @generated from field: string display_name = 4;
     */
    value: string;
    case: "displayName";
  } | {
    /**
     * Filter by exact match on Salesforce metadata.
     *
     * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionSalesforceMetadata salesforce = 5;
     */
    value: EnterpriseSubscriptionSalesforceMetadata;
    case: "salesforce";
  } | {
    /**
     * Filter by partial match on instance domain. The query must be a valid
     * domain.
     *
     * @generated from field: string instance_domain = 6;
     */
    value: string;
    case: "instanceDomain";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ListEnterpriseSubscriptionsFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 2, name: "is_archived", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "filter" },
    { no: 3, name: "permission", kind: "message", T: Permission, oneof: "filter" },
    { no: 4, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 5, name: "salesforce", kind: "message", T: EnterpriseSubscriptionSalesforceMetadata, oneof: "filter" },
    { no: 6, name: "instance_domain", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnterpriseSubscriptionsFilter {
    return new ListEnterpriseSubscriptionsFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionsFilter {
    return new ListEnterpriseSubscriptionsFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionsFilter {
    return new ListEnterpriseSubscriptionsFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnterpriseSubscriptionsFilter | PlainMessage<ListEnterpriseSubscriptionsFilter> | undefined, b: ListEnterpriseSubscriptionsFilter | PlainMessage<ListEnterpriseSubscriptionsFilter> | undefined): boolean {
    return proto3.util.equals(ListEnterpriseSubscriptionsFilter, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest
 */
export class ListEnterpriseSubscriptionsRequest extends Message<ListEnterpriseSubscriptionsRequest> {
  /**
   * Clients use this field to specify the maximum number of results to be
   * returned by the server. The server may further constrain the maximum number
   * of results returned in a single page. If the page_size is 0, the server
   * will decide the number of results to be returned.
   *
   * See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The client uses this field to request a specific page of the list results.
   *
   * See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * Filters define the lookup strategy for this list request. Multiple filters
   * are treated as AND-concatenated.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsFilter filters = 3;
   */
  filters: ListEnterpriseSubscriptionsFilter[] = [];

  constructor(data?: PartialMessage<ListEnterpriseSubscriptionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filters", kind: "message", T: ListEnterpriseSubscriptionsFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnterpriseSubscriptionsRequest {
    return new ListEnterpriseSubscriptionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionsRequest {
    return new ListEnterpriseSubscriptionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionsRequest {
    return new ListEnterpriseSubscriptionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnterpriseSubscriptionsRequest | PlainMessage<ListEnterpriseSubscriptionsRequest> | undefined, b: ListEnterpriseSubscriptionsRequest | PlainMessage<ListEnterpriseSubscriptionsRequest> | undefined): boolean {
    return proto3.util.equals(ListEnterpriseSubscriptionsRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse
 */
export class ListEnterpriseSubscriptionsResponse extends Message<ListEnterpriseSubscriptionsResponse> {
  /**
   * This field represents the pagination token to retrieve the next page of
   * results. If the value is "", it means no further results for the request.
   *
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * The list of subscriptions that matched the given query.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.EnterpriseSubscription subscriptions = 2;
   */
  subscriptions: EnterpriseSubscription[] = [];

  constructor(data?: PartialMessage<ListEnterpriseSubscriptionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "subscriptions", kind: "message", T: EnterpriseSubscription, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnterpriseSubscriptionsResponse {
    return new ListEnterpriseSubscriptionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionsResponse {
    return new ListEnterpriseSubscriptionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionsResponse {
    return new ListEnterpriseSubscriptionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnterpriseSubscriptionsResponse | PlainMessage<ListEnterpriseSubscriptionsResponse> | undefined, b: ListEnterpriseSubscriptionsResponse | PlainMessage<ListEnterpriseSubscriptionsResponse> | undefined): boolean {
    return proto3.util.equals(ListEnterpriseSubscriptionsResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter
 */
export class ListEnterpriseSubscriptionLicensesFilter extends Message<ListEnterpriseSubscriptionLicensesFilter> {
  /**
   * @generated from oneof enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter.filter
   */
  filter: {
    /**
     * Return only licenses corresponding to the given subscription ID, with the
     * most recently issued licenses first.
     *
     * @generated from field: string subscription_id = 1;
     */
    value: string;
    case: "subscriptionId";
  } | {
    /**
     * Return only licenses of the given type.
     *
     * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicenseType type = 2;
     */
    value: EnterpriseSubscriptionLicenseType;
    case: "type";
  } | {
    /**
     * Return only licenses that are active.
     *
     * @generated from field: bool is_revoked = 3;
     */
    value: boolean;
    case: "isRevoked";
  } | {
    /**
     * Return only licenses where the signed license key contains this substring.
     * Query must be at least 3 characters.
     *
     * MUST be used in conjunction with the type = 'ENTERPRISE_SUBSCRIPTION_LICENSE_TYPE_KEY'
     * filter.
     *
     * @generated from field: string license_key_substring = 4;
     */
    value: string;
    case: "licenseKeySubstring";
  } | {
    /**
     * Return only licenses associated with this Salesforce opportunity ID.
     * MUST be used in conjunction with the 'type' filter.
     *
     * @generated from field: string salesforce_opportunity_id = 5;
     */
    value: string;
    case: "salesforceOpportunityId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ListEnterpriseSubscriptionLicensesFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(EnterpriseSubscriptionLicenseType), oneof: "filter" },
    { no: 3, name: "is_revoked", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "filter" },
    { no: 4, name: "license_key_substring", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
    { no: 5, name: "salesforce_opportunity_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "filter" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnterpriseSubscriptionLicensesFilter {
    return new ListEnterpriseSubscriptionLicensesFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionLicensesFilter {
    return new ListEnterpriseSubscriptionLicensesFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionLicensesFilter {
    return new ListEnterpriseSubscriptionLicensesFilter().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnterpriseSubscriptionLicensesFilter | PlainMessage<ListEnterpriseSubscriptionLicensesFilter> | undefined, b: ListEnterpriseSubscriptionLicensesFilter | PlainMessage<ListEnterpriseSubscriptionLicensesFilter> | undefined): boolean {
    return proto3.util.equals(ListEnterpriseSubscriptionLicensesFilter, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest
 */
export class ListEnterpriseSubscriptionLicensesRequest extends Message<ListEnterpriseSubscriptionLicensesRequest> {
  /**
   * Clients use this field to specify the maximum number of results to be
   * returned by the server. The server may further constrain the maximum number
   * of results returned in a single page. If the page_size is 0, the server
   * will decide the number of results to be returned.
   *
   * See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize = 0;

  /**
   * The client uses this field to request a specific page of the list results.
   * A zero value requests the first page.
   *
   * See pagination concepts from https://cloud.google.com/apis/design/design_patterns#list_pagination
   *
   * TODO: Create an internal pagination token type: https://protobuf.dev/programming-guides/api/#encode-opaque-data-in-strings
   *
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  /**
   * Filters define the lookup strategy for this list request. Multiple filters
   * are treated as AND-concatenated.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesFilter filters = 3;
   */
  filters: ListEnterpriseSubscriptionLicensesFilter[] = [];

  constructor(data?: PartialMessage<ListEnterpriseSubscriptionLicensesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "filters", kind: "message", T: ListEnterpriseSubscriptionLicensesFilter, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnterpriseSubscriptionLicensesRequest {
    return new ListEnterpriseSubscriptionLicensesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionLicensesRequest {
    return new ListEnterpriseSubscriptionLicensesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionLicensesRequest {
    return new ListEnterpriseSubscriptionLicensesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnterpriseSubscriptionLicensesRequest | PlainMessage<ListEnterpriseSubscriptionLicensesRequest> | undefined, b: ListEnterpriseSubscriptionLicensesRequest | PlainMessage<ListEnterpriseSubscriptionLicensesRequest> | undefined): boolean {
    return proto3.util.equals(ListEnterpriseSubscriptionLicensesRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse
 */
export class ListEnterpriseSubscriptionLicensesResponse extends Message<ListEnterpriseSubscriptionLicensesResponse> {
  /**
   * This field represents the pagination token to retrieve the next page of
   * results. If the value is "", it means no further results for the request.
   *
   * @generated from field: string next_page_token = 1;
   */
  nextPageToken = "";

  /**
   * The list of licenses that matched the given query, sorted by the most
   * recently created licenses first.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense licenses = 2;
   */
  licenses: EnterpriseSubscriptionLicense[] = [];

  constructor(data?: PartialMessage<ListEnterpriseSubscriptionLicensesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ListEnterpriseSubscriptionLicensesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "licenses", kind: "message", T: EnterpriseSubscriptionLicense, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListEnterpriseSubscriptionLicensesResponse {
    return new ListEnterpriseSubscriptionLicensesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionLicensesResponse {
    return new ListEnterpriseSubscriptionLicensesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListEnterpriseSubscriptionLicensesResponse {
    return new ListEnterpriseSubscriptionLicensesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListEnterpriseSubscriptionLicensesResponse | PlainMessage<ListEnterpriseSubscriptionLicensesResponse> | undefined, b: ListEnterpriseSubscriptionLicensesResponse | PlainMessage<ListEnterpriseSubscriptionLicensesResponse> | undefined): boolean {
    return proto3.util.equals(ListEnterpriseSubscriptionLicensesResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseRequest
 */
export class CreateEnterpriseSubscriptionLicenseRequest extends Message<CreateEnterpriseSubscriptionLicenseRequest> {
  /**
   * The license to create.
   *
   * Required attributes:
   * - subscription_id (this is the parent resource, EnterpriseSubscription)
   * - license
   *
   * `license` supports the following types. At least one must be provided:
   *
   * - license.key, which requires:
   *   - license.key.info_version
   *   - license.key.info.tags
   *   - license.key.info.user_count
   *   - license.key.info.expire_time
   *   - license.key.info.salesforce_opportunity_id
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense license = 1;
   */
  license?: EnterpriseSubscriptionLicense;

  /**
   * Message to associate with the license creation event.
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<CreateEnterpriseSubscriptionLicenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license", kind: "message", T: EnterpriseSubscriptionLicense },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnterpriseSubscriptionLicenseRequest {
    return new CreateEnterpriseSubscriptionLicenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionLicenseRequest {
    return new CreateEnterpriseSubscriptionLicenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionLicenseRequest {
    return new CreateEnterpriseSubscriptionLicenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnterpriseSubscriptionLicenseRequest | PlainMessage<CreateEnterpriseSubscriptionLicenseRequest> | undefined, b: CreateEnterpriseSubscriptionLicenseRequest | PlainMessage<CreateEnterpriseSubscriptionLicenseRequest> | undefined): boolean {
    return proto3.util.equals(CreateEnterpriseSubscriptionLicenseRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseResponse
 */
export class CreateEnterpriseSubscriptionLicenseResponse extends Message<CreateEnterpriseSubscriptionLicenseResponse> {
  /**
   * The license that was created.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionLicense license = 1;
   */
  license?: EnterpriseSubscriptionLicense;

  constructor(data?: PartialMessage<CreateEnterpriseSubscriptionLicenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionLicenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license", kind: "message", T: EnterpriseSubscriptionLicense },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnterpriseSubscriptionLicenseResponse {
    return new CreateEnterpriseSubscriptionLicenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionLicenseResponse {
    return new CreateEnterpriseSubscriptionLicenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionLicenseResponse {
    return new CreateEnterpriseSubscriptionLicenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnterpriseSubscriptionLicenseResponse | PlainMessage<CreateEnterpriseSubscriptionLicenseResponse> | undefined, b: CreateEnterpriseSubscriptionLicenseResponse | PlainMessage<CreateEnterpriseSubscriptionLicenseResponse> | undefined): boolean {
    return proto3.util.equals(CreateEnterpriseSubscriptionLicenseResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseRequest
 */
export class RevokeEnterpriseSubscriptionLicenseRequest extends Message<RevokeEnterpriseSubscriptionLicenseRequest> {
  /**
   * The ID of the license to revoke.
   *
   * @generated from field: string license_id = 1;
   */
  licenseId = "";

  /**
   * Human-readable explanation for revoking the license.
   *
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<RevokeEnterpriseSubscriptionLicenseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "license_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeEnterpriseSubscriptionLicenseRequest {
    return new RevokeEnterpriseSubscriptionLicenseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeEnterpriseSubscriptionLicenseRequest {
    return new RevokeEnterpriseSubscriptionLicenseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeEnterpriseSubscriptionLicenseRequest {
    return new RevokeEnterpriseSubscriptionLicenseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeEnterpriseSubscriptionLicenseRequest | PlainMessage<RevokeEnterpriseSubscriptionLicenseRequest> | undefined, b: RevokeEnterpriseSubscriptionLicenseRequest | PlainMessage<RevokeEnterpriseSubscriptionLicenseRequest> | undefined): boolean {
    return proto3.util.equals(RevokeEnterpriseSubscriptionLicenseRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseResponse
 */
export class RevokeEnterpriseSubscriptionLicenseResponse extends Message<RevokeEnterpriseSubscriptionLicenseResponse> {
  constructor(data?: PartialMessage<RevokeEnterpriseSubscriptionLicenseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.RevokeEnterpriseSubscriptionLicenseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeEnterpriseSubscriptionLicenseResponse {
    return new RevokeEnterpriseSubscriptionLicenseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeEnterpriseSubscriptionLicenseResponse {
    return new RevokeEnterpriseSubscriptionLicenseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeEnterpriseSubscriptionLicenseResponse {
    return new RevokeEnterpriseSubscriptionLicenseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeEnterpriseSubscriptionLicenseResponse | PlainMessage<RevokeEnterpriseSubscriptionLicenseResponse> | undefined, b: RevokeEnterpriseSubscriptionLicenseResponse | PlainMessage<RevokeEnterpriseSubscriptionLicenseResponse> | undefined): boolean {
    return proto3.util.equals(RevokeEnterpriseSubscriptionLicenseResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionRequest
 */
export class UpdateEnterpriseSubscriptionRequest extends Message<UpdateEnterpriseSubscriptionRequest> {
  /**
   * The subscription to update.
   * The following fields are used to identify the membership to update:
   *  - id
   * Multiple fields are treated as AND-concatenated.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscription subscription = 1;
   */
  subscription?: EnterpriseSubscription;

  /**
   * The list of fields to update, fields are specified relative to the EnterpriseSubscription.
   * Updatable fields are:
   *  - instance_domain
   *  - display_name
   *  - salesforce.subscription_id
   *  - salesforce.opportunity_id
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateEnterpriseSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: EnterpriseSubscription },
    { no: 2, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnterpriseSubscriptionRequest {
    return new UpdateEnterpriseSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionRequest {
    return new UpdateEnterpriseSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionRequest {
    return new UpdateEnterpriseSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnterpriseSubscriptionRequest | PlainMessage<UpdateEnterpriseSubscriptionRequest> | undefined, b: UpdateEnterpriseSubscriptionRequest | PlainMessage<UpdateEnterpriseSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEnterpriseSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionResponse
 */
export class UpdateEnterpriseSubscriptionResponse extends Message<UpdateEnterpriseSubscriptionResponse> {
  /**
   * The updated subscription.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscription subscription = 1;
   */
  subscription?: EnterpriseSubscription;

  constructor(data?: PartialMessage<UpdateEnterpriseSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: EnterpriseSubscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnterpriseSubscriptionResponse {
    return new UpdateEnterpriseSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionResponse {
    return new UpdateEnterpriseSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionResponse {
    return new UpdateEnterpriseSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnterpriseSubscriptionResponse | PlainMessage<UpdateEnterpriseSubscriptionResponse> | undefined, b: UpdateEnterpriseSubscriptionResponse | PlainMessage<UpdateEnterpriseSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEnterpriseSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionRequest
 */
export class ArchiveEnterpriseSubscriptionRequest extends Message<ArchiveEnterpriseSubscriptionRequest> {
  /**
   * The ID of the subscription to archive.
   *
   * @generated from field: string subscription_id = 1;
   */
  subscriptionId = "";

  /**
   * Human-readable explanation for revoking the license.
   *
   * @generated from field: string reason = 2;
   */
  reason = "";

  constructor(data?: PartialMessage<ArchiveEnterpriseSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "reason", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchiveEnterpriseSubscriptionRequest {
    return new ArchiveEnterpriseSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchiveEnterpriseSubscriptionRequest {
    return new ArchiveEnterpriseSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchiveEnterpriseSubscriptionRequest {
    return new ArchiveEnterpriseSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ArchiveEnterpriseSubscriptionRequest | PlainMessage<ArchiveEnterpriseSubscriptionRequest> | undefined, b: ArchiveEnterpriseSubscriptionRequest | PlainMessage<ArchiveEnterpriseSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(ArchiveEnterpriseSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionResponse
 */
export class ArchiveEnterpriseSubscriptionResponse extends Message<ArchiveEnterpriseSubscriptionResponse> {
  constructor(data?: PartialMessage<ArchiveEnterpriseSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.ArchiveEnterpriseSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArchiveEnterpriseSubscriptionResponse {
    return new ArchiveEnterpriseSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArchiveEnterpriseSubscriptionResponse {
    return new ArchiveEnterpriseSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArchiveEnterpriseSubscriptionResponse {
    return new ArchiveEnterpriseSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ArchiveEnterpriseSubscriptionResponse | PlainMessage<ArchiveEnterpriseSubscriptionResponse> | undefined, b: ArchiveEnterpriseSubscriptionResponse | PlainMessage<ArchiveEnterpriseSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(ArchiveEnterpriseSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionRequest
 */
export class CreateEnterpriseSubscriptionRequest extends Message<CreateEnterpriseSubscriptionRequest> {
  /**
   * The subscription to create.
   *
   * Required attributes:
   * - display_name
   *
   * Optional attributes:
   * - instance_domain
   * - salesforce.subscription_id
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscription subscription = 1;
   */
  subscription?: EnterpriseSubscription;

  /**
   * Message to associate with the subscription creation event.
   *
   * @generated from field: string message = 2;
   */
  message = "";

  constructor(data?: PartialMessage<CreateEnterpriseSubscriptionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: EnterpriseSubscription },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnterpriseSubscriptionRequest {
    return new CreateEnterpriseSubscriptionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionRequest {
    return new CreateEnterpriseSubscriptionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionRequest {
    return new CreateEnterpriseSubscriptionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnterpriseSubscriptionRequest | PlainMessage<CreateEnterpriseSubscriptionRequest> | undefined, b: CreateEnterpriseSubscriptionRequest | PlainMessage<CreateEnterpriseSubscriptionRequest> | undefined): boolean {
    return proto3.util.equals(CreateEnterpriseSubscriptionRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionResponse
 */
export class CreateEnterpriseSubscriptionResponse extends Message<CreateEnterpriseSubscriptionResponse> {
  /**
   * The created subscription.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscription subscription = 1;
   */
  subscription?: EnterpriseSubscription;

  constructor(data?: PartialMessage<CreateEnterpriseSubscriptionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.CreateEnterpriseSubscriptionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription", kind: "message", T: EnterpriseSubscription },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateEnterpriseSubscriptionResponse {
    return new CreateEnterpriseSubscriptionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionResponse {
    return new CreateEnterpriseSubscriptionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateEnterpriseSubscriptionResponse {
    return new CreateEnterpriseSubscriptionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateEnterpriseSubscriptionResponse | PlainMessage<CreateEnterpriseSubscriptionResponse> | undefined, b: CreateEnterpriseSubscriptionResponse | PlainMessage<CreateEnterpriseSubscriptionResponse> | undefined): boolean {
    return proto3.util.equals(CreateEnterpriseSubscriptionResponse, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.EnterpriseSubscriptionMembership
 */
export class EnterpriseSubscriptionMembership extends Message<EnterpriseSubscriptionMembership> {
  /**
   * The external, prefixed UUID-format identifier of the subscription.
   *
   * @generated from field: string subscription_id = 1;
   */
  subscriptionId = "";

  /**
   * The instance domain associated with this subscription, e.g. "acme.sourcegraphcloud.com".
   *
   * @generated from field: string instance_domain = 2;
   */
  instanceDomain = "";

  /**
   * The SAMS account ID of the member.
   *
   * @generated from field: string member_sams_account_id = 3;
   */
  memberSamsAccountId = "";

  /**
   * The roles of the member. The roles provided are authoritative - all roles
   * not on the list are revoked.
   *
   * @generated from field: repeated enterpriseportal.subscriptions.v1.Role member_roles = 4;
   */
  memberRoles: Role[] = [];

  constructor(data?: PartialMessage<EnterpriseSubscriptionMembership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.EnterpriseSubscriptionMembership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "subscription_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "instance_domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "member_sams_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "member_roles", kind: "enum", T: proto3.getEnumType(Role), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnterpriseSubscriptionMembership {
    return new EnterpriseSubscriptionMembership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionMembership {
    return new EnterpriseSubscriptionMembership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnterpriseSubscriptionMembership {
    return new EnterpriseSubscriptionMembership().fromJsonString(jsonString, options);
  }

  static equals(a: EnterpriseSubscriptionMembership | PlainMessage<EnterpriseSubscriptionMembership> | undefined, b: EnterpriseSubscriptionMembership | PlainMessage<EnterpriseSubscriptionMembership> | undefined): boolean {
    return proto3.util.equals(EnterpriseSubscriptionMembership, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipRequest
 */
export class UpdateEnterpriseSubscriptionMembershipRequest extends Message<UpdateEnterpriseSubscriptionMembershipRequest> {
  /**
   * The membership to update.
   * The first non-empty field of the following fields is used to identify the product subscription to update:
   *  - subscription_id
   *  - instance_domain
   * Multiple fields are treated as AND-concatenated.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.EnterpriseSubscriptionMembership membership = 1;
   */
  membership?: EnterpriseSubscriptionMembership;

  constructor(data?: PartialMessage<UpdateEnterpriseSubscriptionMembershipRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "membership", kind: "message", T: EnterpriseSubscriptionMembership },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnterpriseSubscriptionMembershipRequest {
    return new UpdateEnterpriseSubscriptionMembershipRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionMembershipRequest {
    return new UpdateEnterpriseSubscriptionMembershipRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionMembershipRequest {
    return new UpdateEnterpriseSubscriptionMembershipRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnterpriseSubscriptionMembershipRequest | PlainMessage<UpdateEnterpriseSubscriptionMembershipRequest> | undefined, b: UpdateEnterpriseSubscriptionMembershipRequest | PlainMessage<UpdateEnterpriseSubscriptionMembershipRequest> | undefined): boolean {
    return proto3.util.equals(UpdateEnterpriseSubscriptionMembershipRequest, a, b);
  }
}

/**
 * @generated from message enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipResponse
 */
export class UpdateEnterpriseSubscriptionMembershipResponse extends Message<UpdateEnterpriseSubscriptionMembershipResponse> {
  constructor(data?: PartialMessage<UpdateEnterpriseSubscriptionMembershipResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.UpdateEnterpriseSubscriptionMembershipResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateEnterpriseSubscriptionMembershipResponse {
    return new UpdateEnterpriseSubscriptionMembershipResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionMembershipResponse {
    return new UpdateEnterpriseSubscriptionMembershipResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateEnterpriseSubscriptionMembershipResponse {
    return new UpdateEnterpriseSubscriptionMembershipResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateEnterpriseSubscriptionMembershipResponse | PlainMessage<UpdateEnterpriseSubscriptionMembershipResponse> | undefined, b: UpdateEnterpriseSubscriptionMembershipResponse | PlainMessage<UpdateEnterpriseSubscriptionMembershipResponse> | undefined): boolean {
    return proto3.util.equals(UpdateEnterpriseSubscriptionMembershipResponse, a, b);
  }
}

/**
 * Permission represents a permission that can be performed by a user.
 *
 * @generated from message enterpriseportal.subscriptions.v1.Permission
 */
export class Permission extends Message<Permission> {
  /**
   * The type of the permission.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.PermissionType type = 1;
   */
  type = PermissionType.UNSPECIFIED;

  /**
   * The relation between the user and the resource.
   *
   * @generated from field: enterpriseportal.subscriptions.v1.PermissionRelation relation = 2;
   */
  relation = PermissionRelation.UNSPECIFIED;

  /**
   * The SAMS account ID of the user.
   *
   * @generated from field: string sams_account_id = 3;
   */
  samsAccountId = "";

  constructor(data?: PartialMessage<Permission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "enterpriseportal.subscriptions.v1.Permission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(PermissionType) },
    { no: 2, name: "relation", kind: "enum", T: proto3.getEnumType(PermissionRelation) },
    { no: 3, name: "sams_account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Permission {
    return new Permission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Permission {
    return new Permission().fromJsonString(jsonString, options);
  }

  static equals(a: Permission | PlainMessage<Permission> | undefined, b: Permission | PlainMessage<Permission> | undefined): boolean {
    return proto3.util.equals(Permission, a, b);
  }
}

