query RepositoryGitRefs($repoName: String!, $query: String, $type: GitRefType!) {
    repository(name: $repoName) {
        ...RepositoryGitRefs
    }
}

query RepositoryGitCommits($repoName: String!, $query: String!, $revision: String!) {
    repository(name: $repoName) {
        commitByHash: commit(rev: $query) {
            ...RevPickerGitCommit
        }
        ancestorCommits: commit(rev: $revision) {
            ancestors(first: 15, query: $query) {
                nodes {
                    ...RevPickerGitCommit
                }
            }
        }
    }
}

query ResolveRepoRevision($repoName: String!, $revision: String!) {
    repositoryRedirect(name: $repoName) {
        __typename
        ... on Repository {
            ...ResolvedRepository
        }
        ... on Redirect {
            url
        }
    }
}

fragment ResolvedRepository on Repository {
    id
    commit(rev: $revision) {
        oid
    }
    changelist(cid: $revision) {
        commit {
            oid
        }
    }
    mirrorInfo {
        cloneProgress
        cloneInProgress
        cloned
    }
    defaultBranch {
        abbrevName
    }
    externalURLs {
        url
        serviceKind
    }
    ...RepoPage_ResolvedRevision
    ...BlobPage_ResolvedRevision
    ...CodySidebar_ResolvedRevision
}

query DepotChangelists($depotName: String!, $revision: String!) {
    repository(name: $depotName) {
		changelist: commit(rev: $revision) {
            ...RevPickerChangelist
        }
        ancestorChangelists: commit(rev: $revision) {
            ancestors(first: 15) {
                nodes {
                    ...RevPickerChangelist
                }
            }
        }
    }
}

query DepotChangelist($depotName: String!, $revision: String!) {
    repository(name: $depotName) {
		commit(rev: $revision) {
            perforceChangelist {
                    cid
                    canonicalURL
            }
        }
    }
}

fragment RevPickerChangelist on GitCommit {
    __typename
    id
    subject
    perforceChangelist {
        cid
        canonicalURL
    }
    ...DepotChangelistAuthor
}

fragment DepotChangelistAuthor on GitCommit {
    author {
        date
        person {
            __typename
            ...Avatar_Person
        }
    }
}
